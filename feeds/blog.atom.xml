<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AI EXP - Blog</title><link href="/" rel="alternate"></link><link href="/feeds/blog.atom.xml" rel="self"></link><id>/</id><updated>2017-07-23T00:00:00+02:00</updated><entry><title>Rudolf Dupszki versus Yixin</title><link href="/ai-vs-human-gomoku-2.html" rel="alternate"></link><published>2017-07-23T00:00:00+02:00</published><updated>2017-07-23T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2017-07-23:/ai-vs-human-gomoku-2.html</id><summary type="html">&lt;p&gt;This article is a summary of the 2-game match between Yixin and Rudolf Dupszki in Gomoku World Championship 2017. The final result of Yixin is 2 win.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;(Last update: 2017-7-30)&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More detailed information will be added before August 6th.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Match Settings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Number of Round: 2&lt;/li&gt;
&lt;li&gt;Rule: Swap-2&lt;/li&gt;
&lt;li&gt;Computer: Amazon EC2 m4.16xlarge&lt;/li&gt;
&lt;li&gt;Time Control: 120 min/game + 30 sec/move&lt;ul&gt;
&lt;li&gt;Human player's time is counted by a table clock; Yixin's time is counted by itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Game Records and Analysis&lt;/h2&gt;
&lt;h3&gt;Round 1:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Rudolf Dupszki&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: Two more stones, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l13k12m11n14o13k11j12k13k10j10i9j9j8k7h11l8i11m9n10m7l9l7n7m8m6k6n9n6k9i7j7k5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/rudolf_vs_yixin_1.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/rudolf_vs_yixin_eval1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 2:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Rudolf Dupszki&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: Two more stones, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Black wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e10g8g5f5f6e7f7f8e8g9h10d9g10f10h8h9i9g7e9j8h11i12e11e12g11f11f12e13g13h14i10g14j9k8i8k4i7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/rudolf_vs_yixin_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/rudolf_vs_yixin_eval2.png"&gt;&lt;/p&gt;
&lt;h2&gt;Other Information&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/notes/gomokuworld/rudolf-dupszki-vs-yixin-2017/857225044431377/"&gt;Report by Vladimir Nipoti&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://vk.com/topic-19499145_35662455"&gt;Discussion on VK&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Preparation&lt;/h4&gt;
&lt;p&gt;Yixin always puts the opening &lt;code&gt;e10g8g5&lt;/code&gt; when it is the tentative Black. It was picked out from a pool of balanced openings automatically generated by Yixin.&lt;/p&gt;
&lt;h4&gt;Depth&lt;/h4&gt;
&lt;p&gt;The average minimum depth of Yixin in the match is about 17.&lt;/p&gt;</content><category term="AI"></category><category term="yixin"></category><category term="gomoku"></category></entry><entry><title>Lin Shu-Hsuan versus Yixin</title><link href="/ai-vs-human-renju-2.html" rel="alternate"></link><published>2017-07-16T00:00:00+02:00</published><updated>2017-07-16T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2017-07-16:/ai-vs-human-renju-2.html</id><summary type="html">&lt;p&gt;This article is a summary of the 4-game match between Yixin and Lin Shu-Hsuan. The final result of Yixin is 3 win and 1 loss.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;(Last update: 2017-7-30)&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More detailed information will be added before August 6th.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;CCTV has been planning a TV show about competitions between AIs and humans (The name of the TV show is &lt;em&gt;机智过人&lt;/em&gt;). In the original plan, one of the competitions is a match between Yixin and top human renju players in July or August. A director of the TV show suggested organizing a match with a top player to do a preliminary test of Yixin before recording. So, with the help of Tao Tao, I got in touch with Lin Shu-Hsuan and planned to organize a match with him starting from June 10th. However, on June 8th, I was informed by CCTV that the renju competition in the TV show was canceled due to CCTV's technical issues. The news was unexpected and depressing, but CCTV's decision could hardly be changed. &lt;/p&gt;
&lt;p&gt;Because of the cancellation, it's no longer necessary to have the match with the aim of doing a preliminary test of Yixin only. Therefore, I asked Lin Shu-Hsuan (1) if he still would like to have the match, and (2) if he would like to postpone the match to July so that the preparation that had been being worked on for CCTV's match could be used, and thus the match could be more formal. We then came to an agreement that we would still have the match, and the match would take place in July.&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Compared with the preparation of &lt;a href="/ai-vs-human-renju.html"&gt;the match with Epifanov Dmitry&lt;/a&gt;, a lot more effort was put into opening book preparation. This time, the opening book preparation consists of 3 parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verifying game databases&lt;/strong&gt; We managed to collect and verify many game databases. Those databases can be classified into 2 types: (1) Databases of sure win/loss positions; (2) Databases of best moves. The verification was done automatically by Yixin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5th moves in Soosorv-8&lt;/strong&gt; We analyzed the possible 5th moves for each opening and 4th move. The analysis was done automatically by Yixin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adding human opening knowledge&lt;/strong&gt; The results of part 1 and 2 were not perfect, so they were manually revised based on human knowledge. In addition, the opening strategies such as the conditions under which the AI should choose to swap were added.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kai Yu provided hundreds of CPU cores to the preparation, and Runzhe Yang scheduled the best move verification jobs (part 1(2)) and 5th move analysis jobs (part 2) on those CPUs. Sure win/loss verification jobs (part 1(1)) were run on my computers. Tianyi Hao made great efforts in working on part 3 to finish up all the rest of the opening preparation.&lt;/p&gt;
&lt;p&gt;Compared with the last year's version, many modifications were introduced. One of the modification is a bug fix to the parallel search, which makes Yixin be able to take advantage of multiple-core processors more effectively. This directly helps Yixin gain a lot of Elo when it runs on a powerful computer.&lt;/p&gt;
&lt;p&gt;Tao Tao offered much help in finding suitable places for the match (below is a photo).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/lin1.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Match Settings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Number of Round: 4&lt;/li&gt;
&lt;li&gt;Rule: Soosorv-8&lt;/li&gt;
&lt;li&gt;Computer: Amazon EC2 m4.16xlarge&lt;/li&gt;
&lt;li&gt;Time Control: 120 min/game + 30 sec/move&lt;ul&gt;
&lt;li&gt;Human player's time is counted by a table clock; Yixin's time is counted by itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Game Records&lt;/h2&gt;
&lt;h3&gt;Round 1 (July 15):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Lin Shu-Hsuan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: +, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: G9, J11, F8, I9, G8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Black wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9h10i10f8i9g9i11i8g8j11f10i12e7e6h7i6k8k10l9j9j10h12h13g5h5g4i7g7g6f5h3h6i5d4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_eval1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 2 (July 16):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Lin Shu-Hsuan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: +, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: I10, J9, G9, I7, K7, I8, J8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8i9j7h9i8g8g9i10f7i7j11j8k9h10g11h11h12i13i11g13j10l8j9j13h13i12g10g6k7k11l10k14l15k6i6m12m10m8k8l9g4h5l7k13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_eval2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 3 (July 22):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Lin Shu-Hsuan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: J7, I7, I6, G10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9h6i8g10i10i7j11k12g9i9j8j10k11i11h7h12g13i12j12f9f7g8h11g6f6l10g12f13k8j9l8m8k6k7g5f5h4i3j7l5j5i4i6h5k4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_3.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_eval3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 4 (July 23):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Lin Shu-Hsuan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, - &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: I9, I8, I7, J8, G8, G9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Black wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9j10i10g9i7i8g7f8j8f7e8f6f5e7d6d8g5k9h12f10f9d10e11d9d7g10e10e9b5c6f4h6c7b10c9c11b12d12d11e13f14a9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/lin_vs_yixin_eval4.png"&gt;&lt;/p&gt;
&lt;h2&gt;Other Information&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vk.com/topic-1735025_35634686"&gt;Discussion on VK&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Depth&lt;/h4&gt;
&lt;p&gt;The average minimum depth of Yixin in the match is about 18.&lt;/p&gt;</content><category term="AI"></category><category term="yixin"></category><category term="renju"></category></entry><entry><title>Yixin in the Final of the Russian Championship 2017</title><link href="/ai-vs-human-gomoku.html" rel="alternate"></link><published>2017-06-14T00:00:00+02:00</published><updated>2017-06-14T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2017-06-14:/ai-vs-human-gomoku.html</id><summary type="html">&lt;p&gt;This article is a summary of 3 games between Yixin and Nikonov Konstantin, and 1 game between Yixin and Makarov Pavel. The final result of Yixin is 4 win.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Recently there was a discussion about the concept of positional play on VK. To shed light on whether positional play is effective or not, people organized a 2-game match on the Internet between Yixin which looks like a tactical player and Denis Osipov who is believed to be one of the best positional players. The result of the match is Yixin won 2 games. After that, people organized another game between Yixin and Gergo Toth, and Gergo won the game. (&lt;a href="https://vk.com/topic-19499145_35466971"&gt;link to the discussion of the 3 games&lt;/a&gt;) &lt;/p&gt;
&lt;p&gt;I was informed of the result by friends after each match. Although I didn't care about the discussion about different playing styles, I did care about the result of the games. However, the result didn't make a lot of sense to me because of the slow hardware, weak version and the not-so-balanced opening rule (it's not a real Swap-2). Specifically, the speed reported by Yixin on their computer was only 300-400; the version used in the game is a 2-year old one which has serious bugs for the standard rule. In my opinion, Yixin would have much better performance if they could either use the 2017 Demo or contact me to have a formal match against the latest full version. Actually, I don't believe human players could outperform the latest full version running on a powerful computer. &lt;/p&gt;
&lt;p&gt;On June 8th, Alexander Bogatirev told me that he was in the organization committee of the Final of the Russian Championship, and he proposed to organize a better AI-vs-human match during the event. I thought it's a good idea, so I accepted the proposal and promised to offer a powerful computer to run Yixin remotely.&lt;/p&gt;
&lt;h2&gt;Match Settings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Number of Round:&lt;ul&gt;
&lt;li&gt;3 for Nikonov Konstantin&lt;/li&gt;
&lt;li&gt;1 for Makarov Pavel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rule: Swap-2&lt;/li&gt;
&lt;li&gt;Time Control:&lt;ul&gt;
&lt;li&gt;90 min/game + 30 sec/move (Yixin vs Nikonov Konstantin)&lt;/li&gt;
&lt;li&gt;10 min/game + 30 sec/move (Yixin vs Makarov Pavel)&lt;/li&gt;
&lt;li&gt;Human player's time is counted by a table clock; Yixin's time is counted by itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Computer: Dual E5-2683 v3, 64GB RAM, Windows 10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/alex1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fig.1&lt;/strong&gt; The operator -- Alexander Bogatirev, who helped copy the AI's moves to the board, and human player's moves to the computer.&lt;/p&gt;
&lt;h2&gt;Games between Yixin and Nikonov Konstantin&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/nikonov1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fig.2&lt;/strong&gt; Nikonov Konstantin is thinking.&lt;/p&gt;
&lt;h3&gt;Round 1:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Nikonov Konstantin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: Two more stones, -&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Black wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l13l10m11n11n9j11k10j13j10k8m10k11m9m8j9l11k9l9l8i11h11h9g8h7f8h8h6g7j6k7j7j8l6k6k5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/nikonov_vs_yixin_1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 2:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Nikonov Konstantin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: +&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d12c10c8f11f10e11g11e9e12d10g12f12g13g10e8c9b8d8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/nikonov_vs_yixin_2.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 3:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Nikonov Konstantin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: Two more stones, +&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;l13l10m11m15j15k10m10m12i10j11i12j12l11k11i13i11k13j13j10k8k9m7l6g9g11f10h8f9f11m8m9h9i9l9n7f8h10j8i8f7f6g7e9g8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/nikonov_vs_yixin_3.png"&gt;&lt;/p&gt;
&lt;h2&gt;The Game between Yixin and Makarov Pavel&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/makarov1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fig.3&lt;/strong&gt; Makarov Pavel is thinking.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Makarov Pavel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: +&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;d12c10c8e10d11d10f10e11f12g11e9e8f11f9g10e12g8f7d9f6f5g6h6d6c6e7d8c5b4b10a10g7d7e5d4h4c7b6g3i4h5e4e6g4f4i3g5i7h7h8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/makarov_vs_yixin_1.png"&gt;&lt;/p&gt;
&lt;h2&gt;Other Information&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://vk.com/topic-19499145_35496204"&gt;Link to the discussion of the match on VK&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Preparation&lt;/h4&gt;
&lt;p&gt;Yixin always puts the opening &lt;code&gt;d12c10c8&lt;/code&gt; when it is the tentative Black. That's the only opening preparation I made for the match. Apart from that, all the moves were analyzed during the games.&lt;/p&gt;
&lt;h4&gt;Depth&lt;/h4&gt;
&lt;p&gt;The average minimum depth of Yixin in the games with Nikonov and Makarov was about 18 and 15 respectively.&lt;/p&gt;</content><category term="AI"></category><category term="yixin"></category><category term="gomoku"></category></entry><entry><title>Epifanov Dmitry versus Yixin</title><link href="/ai-vs-human-renju.html" rel="alternate"></link><published>2016-05-19T00:00:00+02:00</published><updated>2016-05-19T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2016-05-19:/ai-vs-human-renju.html</id><summary type="html">&lt;p&gt;This article is a summary of the 8-game match between Yixin and Epifanov Dmitry. The final result of Yixin is 2 win, 2 draw, and 4 loss.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;(Last update: 2016-6-5)&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Match Settings&lt;/h2&gt;
&lt;p&gt;The match was proposed by Epifanov Dmitry in March 2016, and scheduled to be finished in May 2016. Below are the match settings:&lt;/p&gt;
&lt;p&gt;The settings proposed by Epifanov Dmitry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of Round: 8&lt;/li&gt;
&lt;li&gt;Rule: Soosorv-8&lt;/li&gt;
&lt;li&gt;Computer: i7-4600U (2 Cores, 4 Threads, 2.1/3.3Ghz), 8GB RAM, Windows 7 (64 bit)&lt;/li&gt;
&lt;li&gt;Time Control: 120 min/game + 30 sec/move&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The settings proposed by Kai Sun:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yixin's thinking details are not shown.&lt;/li&gt;
&lt;li&gt;Except for testing games (to help the human player get familiar with the basic functions of the software) and 8 formal games, the human player is not allowed to use the match version for analysis before the end of the whole match.&lt;/li&gt;
&lt;li&gt;Different versions of Yixin can be used in different rounds, i.e. Yixin can be updated between two rounds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The livestream is broadcast using the same computer where Yixin runs, which takes 3-4% CPU on average.&lt;/li&gt;
&lt;li&gt;The schedule is decided by the human player, including the time for each game and the rounds in which the human player will open the game (i.e., be the tentative black).&lt;ul&gt;
&lt;li&gt;Round 1  E - Y  (May 11)&lt;/li&gt;
&lt;li&gt;Round 2  Y - E  (May 14)&lt;/li&gt;
&lt;li&gt;Round 3  E - Y  (May 17)&lt;/li&gt;
&lt;li&gt;Round 4  Y - E  (May 19)&lt;/li&gt;
&lt;li&gt;Round 5  Y - E  (May 22)&lt;/li&gt;
&lt;li&gt;Round 6  E - Y  (May 23)&lt;/li&gt;
&lt;li&gt;Round 7  Y - E  (May 25)&lt;/li&gt;
&lt;li&gt;Round 8  E - Y  (May 27)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The speed of the computer was influenced due to unexpected unknown reasons in round 1 and round 3. In particular, the speed reported by Yixin in round 1 and round 3 was around 1300 and 400 respectively. In comparison, normally the speed on i7-4600U is around 1600 in the opening stage. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Game Records and Analysis&lt;/h2&gt;
&lt;h3&gt;Round 1 (May 11):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: F9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8i9f6g9f9f8h10h7i10g10g7g5j9j11e6g11g8f7d6c6k8l7j7j8l9m10f5g4k9k7k10l11b9c8d9e9d8d10i11g12g13h12i13m9e5d4f4c7c9e7m8e12i12i14j13h13f11e11n7o6d7d5e10d12f12f10c13b12c11a12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_1.png"&gt;&lt;/p&gt;
&lt;p&gt;This is the first game between Yixin and Epifanov Dmitry (I will call him Epifanov for short in the following analysis).  Before the game, I spent around 1 month's spare time working on the necessary new features for the match. Of all the new features, the most time-consuming one is the support for Soosorv-8. However, because I had very limited knowledge about both Gomoku and Renju, the opening book preparation was inefficient and (later on) proved to be not very effective.  Limited resources further added to the difficulties.  In particular, most of the published databases in .lib format were of low quality due to false positive sure win / loss marks, and I could hardly make high quality database from scratch with the current tools because a large portions of the false postives were caused by Renjusolver and the .lib format has fundamental weaknesses.  Therefore, to make the opening book, finally I made a decision to enable Yixin to support making databases in a brand new format, and made the whole opening book with Yixin.  To save my preparation time, I only prepared all 4th moves for D4, and for most of the other opening patterns, I only prepared one 4th move.  And the opening strategy is, if Yixin is assgined the tentative Black, Yixin will always play D4; otherwise, Yixin will always make the 4th move and let the human decide whether to swap or not. (After the 2nd game, I prepared all 4th moves for another two opening patterns.) Despite that this strategy helped save the preparation time, at the same time it made Yixin be at disadvantage when the human was assigned the tentative Black.&lt;/p&gt;
&lt;p&gt;Yixin was out the opening book after the 7th move so almost all the moves played by Yixin were come up during the game, though Epifanov said Yixin played well during the opening stage. The minimum search depth reported by Yixin before the 27th move was around 15, and dropped to around 12 after that. It was interesting that the normalized evaluation&lt;sup&gt;1&lt;/sup&gt; dropped to below 0 almost at the same time. (The normalized evaluation is shown in the below figure.  Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 61) is not included.) After the 27th move, there was little chance for Yixin to win, but still much chance to draw.  However, the version used in this game was found to have several bugs for forbidden moves evaluation (most of the bugs were found after the 2th game, except for one which was found during the 8th game), which partly contributed to the loss of Yixin.&lt;/p&gt;
&lt;p&gt;After the game, I made some small modifications to Yixin's time management thanks to Epifanov's suggestion (However, I did not have the time to make great modifications due to time limitaion).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval1.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 2 (May 14):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: +, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: I7, J11, I10, H11, F6, I9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8g8g9h9j11f9f8h10e10i7e9f7e6g7e8e7h7e11d8c7d7c8d6d5g11h12c6f6i12k10i11h11h13i13g12f11d10d9i8g6g5k8k9h5j10i9i4l8c10f10g4h3h4j4m9l9l6l11l10j7i6m10n11k12e4f4n9m8j8o8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_2.png"&gt;&lt;/p&gt;
&lt;p&gt;In the second game, Yixin was assigned as the tentative Black, however, Yixin was again out the opening book early -- it was out the book after the 9th move.  In comparison, it seems that Epifanov made moves quickly until the 28th move.  So it was very likely that "fortunately" Yixin again played well during the opening stage and unfortunately Epifanov knew the opening pretty well.  The game went on smoothly for both Yixin and Epifanov, and Epifanov offered draw after making the 52th move.  However, Yixin rejected the offer.  I once thought it was because Yixin believed the position was much better for Black than for White, but later on I realized it was because the offer draw was made when Yixin was thinking, and the version used in that game did not accept draw offer if it was thinking.  The rejection was a bad idea for Yixin because it made a very strange 55th move which led to its loss.    &lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 65) is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval2.png"&gt;&lt;/p&gt;
&lt;p&gt;After the game, I prepared all 4th moves for another two opening patterns since it seems that Epifanov knew D4 very well. Additionally, I found several serious bugs for forbidden moves evaluation which were the key reason for this loss.  They were fixed in the versions used in later games.  &lt;/p&gt;
&lt;h3&gt;Round 3 (May 17):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: H9, I6, I7, I10, J6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8i9j8i8j6i7i6h9k6h6j9i10i11j7g10f5g8h7g7g6e4f6f4h5h4e6d6g4g9g11l6m6h3g5e5j5i5g2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_3.png"&gt;&lt;/p&gt;
&lt;p&gt;Probably because Epifanov guessed Yixin's opening strategy, Epifanov opened I3 in the 3rd game. According to the comment from Epifanov after the game, almost all the 4th moves are quite unbalanced so Yixin should swap after the 3rd move and choose the color itself, as opposed to making the 4th move itself. &lt;/p&gt;
&lt;p&gt;Yixin was out the opening book after the 7th move, and unluckily this time it did not find the correct path -- the 9th was already a loss in theory. &lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 21) is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 4 (May 19):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, - &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: I9, F10, G9, G8, I11&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Draw&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9h10j9i11g9i9j10j11i8g10h11k10i12k11k8i10j12k12k13j6k7k5i7j7j5h6g6f5e5h4h5i4j4d9e10d8d7e9c9g3f6e4f2f3f4f12g11c7b6d11c10d10d12c11b12f11f13e11b11k14l11d4d5h3i3j14l14l13m14e6l6m5l8m8l9l10b13b10k4l5l3n5o5m2m3m9m7k3n7o7n8m11n11m10m12c4c12k9n10n9n12d13b14b15e14a12c5b5d3d15h7i6g13k6l4n3m4n4n2e7i2a11a10n13e8g5g2h2g14h13d14f14a14c14j15l1o10k15o15a7a4g12b2f1h15a5e1f9f10c2a8i5f7j13e15o11m1g15i1h1a1a3o1o4a15g7c15i15f15b1l15m15n15j2h14i14n14o14a13c13e13i13m13o13h12n1l12k1o12j1a9g1b9d1o9b8c8o2g8c1j8l2o8k2b7e2l7d2a6a2c6o3m6j3n6c3o6b3b4g4d6e3f8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_4.png"&gt;&lt;/p&gt;
&lt;p&gt;I once thought Epifanov would swap after the 3th move, however, he made the 4th. Because of the randomness I added to the opening stage, instead of offering the best 5th move near the center, Yixin offered the symmetric one. Although this 5th is not better than the one near the center, it seems that Epifanov was not as familiar with this 5th as the 5th of D4 in the 2nd game.  Yixin was out the opening book after the 11th move. The minimum depth reported by Yixin was around 14 before the 37th move, around 12 between the 39th move and 67th move, and around 10 after the 69 move.  Similar to the 2nd game, the game went on smoothly, but Epifanov did not offer draw until the 80th move.  However, his offers (he made several offers afer the 80th move) were rejected several times for the same reason as the 2nd game -- the version used in this game did not accept draw offer if Yixin was thinking.      Thanks to the bug fixes of the forbidden move evaluation, Yixin did not make any stupid mistake, and the long game was finally ended by Yixin accepting the draw offer after the 224th move.&lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 171) is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval4.png"&gt;&lt;/p&gt;
&lt;p&gt;After the game, the draw offer was modified to enable Yixin to accept draw no matter whether the engine is thinking or not, and the condition for accepting the offer was made much loose. &lt;/p&gt;
&lt;h3&gt;Round 5 (May 22):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: G9, F8, G8, I9, G7, I7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: White wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9h10j9g7i8g9g10j7i9f8e7h7i7i11j12i6h6k9g8j10l8f11i10f7k8h11m8j8g11l7m10m12m9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_5.png"&gt;&lt;/p&gt;
&lt;p&gt;It was the first time for Yixin to play White. Yixin was out the opening book after the 12th move. Yixin soon obtained a big advantage and got its first win in the match.&lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 30) is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval5.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 6 (May 23):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, - &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: G9, I9, J9, J8, J10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Black wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9j7f9j9g8j10j8i10h7i6i9k10l10l11m12m10g9e9l9j13k12h11g12g10h10i12k14j11j12i11k11i13i14h13g14k13g13l13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_6.png"&gt;&lt;/p&gt;
&lt;p&gt;Yixin was out the opening book after the 6th move, but actually the book was already incorrect from the 5th move, and unluckily after the game Epifanov told me that he had played the 4th a couple of times and analyzed a lot.  The correct number of alternatives should be 6 rather than 5, and an analysis done by my friends showed that the 5th played in the game was already a sure win for Black.&lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 10) is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval6.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 7 (May 25):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: +, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: K8, I7, F9, J8, I9, I11, I8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Black wins&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8h9h10f10k8j8k10k9i10l10i7j7j9h11i5i8g10j10l7m6k5j6j5l5k6i4k4k7h6m11n12j4h5g5h7h4i6l3g8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_7.png"&gt;&lt;/p&gt;
&lt;p&gt;Yixin opened D1 again and this time Epifanov chose to swap after the 3rd move.  Yixin made the 4th and offered 7 alternatives.  All alternatives except for K8 were common.  As for K8, although it was not common, it was kept because Yixin gave it a reasonably good evaluation score.  After thinking for a long time, Epifanov selected K8 as the 5th move.  In theory, the decision was the best because from the current analysis of Yixin, K8 was the most balanced one among the 7 alternatives. However, in practice, K8 was a bad decision because it was hard to give the correct defence moves in limited time.  Yixin was out the opening book after the 13th move, but the result that the 13th move was a sure win came from the thinking during the game (In the opening book, the postion was only marked that Black had medium advantage).  After the game, the 7th move played in the game was proved to be a sure win for the Black.&lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; and endgame&lt;sup&gt;3&lt;/sup&gt; (moves after 11) is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval7.png"&gt;&lt;/p&gt;
&lt;h3&gt;Round 8 (May 27):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Black&lt;/strong&gt;: Yixin&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;White&lt;/strong&gt;: Epifanov Dmitry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Swap&lt;/strong&gt;: -, + &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Alternatives&lt;/strong&gt;: J9, H9, J8, J7, F8, G8&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Result&lt;/strong&gt;: Draw&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;h8i9i7g9f8g8h9h7g10f11j8h6h11f9e10h10k8j9i6l8k5i8k10l9k9k11h5g6f5g5g7g4j6l4l10m11g3i3h4i5e5d4f4d6e6f6d5c5c8d10c9d7e8e7c10c7b7d9d8b8e12d11e11e9d12c12i11f12j10f13f10e13g11f15f14m10c4b3j11m12m13k14e3f3g2i1h3i4i2j2l13k12k13j13l11l5j4j7l6m6m4l12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_8.png"&gt;&lt;/p&gt;
&lt;p&gt;Yixin was out the opening book after the 11th move.  The final game went on pretty smoothly.  During the game, I noticed another bug for forbidden moves evaluation but luckily it did not make Yixin lose because the bug was not as serious as the previous bugs and Epifanov seemed to be very cautious during the game so that he did not attack much and he did not have much time left after the middle game. &lt;/p&gt;
&lt;p&gt;The normalized evaluation&lt;sup&gt;1&lt;/sup&gt; is shown as follows. Note that the opening&lt;sup&gt;2&lt;/sup&gt; is not included.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/epifanov_vs_yixin_eval8.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Footnotes:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Different from the raw score output by Yixin, here a simple normalization is done to make a score of 0 correspond to balanced positions.&lt;/li&gt;
&lt;li&gt;Here, the &lt;em&gt;opening&lt;/em&gt; means the first 3 Black moves and 2 White moves, which were played based totally on the opening database (as opposed to being analyzed by the engine).&lt;/li&gt;
&lt;li&gt;Here, the &lt;em&gt;endgame&lt;/em&gt; means either the positions which were proved by Yixin to be a sure win / loss during the game, or the situations when there is no possibility to make five for both sides, i.e. a sure draw.&lt;/li&gt;
&lt;/ol&gt;</content><category term="AI"></category><category term="yixin"></category><category term="renju"></category></entry><entry><title>Towards Deep Yixin</title><link href="/towards-deep-yixin.html" rel="alternate"></link><published>2014-09-07T00:00:00+02:00</published><updated>2014-09-07T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2014-09-07:/towards-deep-yixin.html</id><summary type="html">&lt;p&gt;Recently, I have been struggling with varieties of multi-threading bugs, trying to enable Yixin to take advantage of multi-core processors. Although there is still some space to improve the speedup, the result is good to some extent, because what I would like now is just making Deep Yixin run without …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I have been struggling with varieties of multi-threading bugs, trying to enable Yixin to take advantage of multi-core processors. Although there is still some space to improve the speedup, the result is good to some extent, because what I would like now is just making Deep Yixin run without bugs from synchronization. There is no doubt that the multi-threaded search will be improved in the future.&lt;/p&gt;
&lt;p&gt;I tested the Deep Yixin (0.4.28) on a 4-core i7 with 21 balanced openings, and the result is as follows:&lt;/p&gt;
&lt;p&gt;300s/1000s&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Deep Yixin loses&lt;/th&gt;
&lt;th&gt;Deep Yixin wins&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Yixin14(0.4.3)&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tito14&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Renjusolver(H6)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hewer14&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;(2015-11-26 Update)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The framework for SMP has been redesigned.  Rather than Windows API used in previous versions, the new framework is fully implemented with the thread library introduced by C++11.  Besides, I managed to make extra thread information maintenance cost little so that the speed of single-threaded search in the new framework is almost the same as the single-threaded version.&lt;/p&gt;
&lt;p&gt;The preliminary result between 2 threads vs 1 thread is 25:11 (18 balanced openings carefully selected by a gomoku expert were used).  Both turbo boost and hyper-threading were turned on.  Time settings were 300s/1000s.  It is worth noting that the strength difference could be inflated quite a bit because of the test being self test.&lt;/p&gt;</content><category term="yixin"></category><category term="multi-thread"></category></entry><entry><title>Implementing Elegant Quines in C with Preprocessing</title><link href="/implementing-elegant-quines-in-c-with-preprocessing.html" rel="alternate"></link><published>2014-08-01T00:00:00+02:00</published><updated>2014-08-01T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2014-08-01:/implementing-elegant-quines-in-c-with-preprocessing.html</id><summary type="html">&lt;p&gt;A quine is a computer program which takes no input and produces a copy of its own source code as its only output. This article introduces an approach to implement elegant quine in C with preprocessing.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;The name "quine" was coined by Douglas Hofstadter, in his popular science book Gödel, Escher, Bach: An Eternal Golden Braid, in the honor of philosopher Willard Van Orman Quine (1908–2000), who made an extensive study of indirect self-reference, and in particular for the following paradox-producing expression, known as Quine's paradox:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"Yields falsehood when preceded by its quotation" yields falsehood when preceded by its quotation.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Concretely, the term "quine" is referred to a computer program which takes no input and produces a copy of its own source code as its only output. First appeared in Paul Bratley and Jean Millo's article "Computer Recreations: Self-Reproducing Automata" in 1972, the idea of quine is fascinating due to its self-reproducing feature. For amusement, programmers sometimes attempt to develop the shortest possible quine in any given programming language. Moreover, problems based on the idea of quine are popular in various code golf, which is a type of recreational computer programming competition in which participants strive to achieve the shortest possible code that implements a certain algorithm.&lt;/p&gt;
&lt;p&gt;There are many theoretical results for quine. For example, it is possible to implement quine in any Turing complete programming language, as a direct consequence of Kleene's recursion theorem. However, this article focuses more on quines' implementation.&lt;/p&gt;
&lt;p&gt;In some languages, quines are quite easy to be implemented, since in some languages, an empty program is a quine. Such an empty program, submitted as "the world's smallest self reproducing program", once won the "worst abuse of the rules" prize in the International Obfuscated C Code Contest. Another possible way to achieve self-reproducing is to use file operations to read its source code and print, which seems a bit cheating. All these kinds of trival cases are omitted in this article.&lt;/p&gt;
&lt;p&gt;This article shows an easy, general, and elegant way to implement quines in C with preprocessing which not only have short length, but can easily do general purpose computations as well. The techniques in this article are widely used in various code golf.&lt;/p&gt;
&lt;p&gt;The remainder of the article is organized as follows. In section 2, the preprocessing techniques used in this article are described. Section 3 shows how to implement quines.&lt;/p&gt;
&lt;h2&gt;2. The C Preprocessing&lt;/h2&gt;
&lt;p&gt;One of the major use of the preprocessor in C is to define macros, which is also used to implement quines in this article. A macro definition is usually of the following form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define MACRO_NAME(arg1, arg2, ...) [code to expand to]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For instance, a simple macro for multiplication might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define MULT(x, y) (x)*(y)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After &lt;code&gt;MULT&lt;/code&gt; is defined, one can write &lt;code&gt;MULT(4, 2+3)&lt;/code&gt; and the preprocessor expands it to &lt;code&gt;(4)*(2+3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Besides macro itself, the stringize or number-sign operator &lt;code&gt;#&lt;/code&gt; is also used in this article, which can convert a macro parameter into a string constant. For instance, with the following macro  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define hello(a) printf(&amp;quot;Hello &amp;quot; #a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One can write &lt;code&gt;hello(Kai)&lt;/code&gt; and the preprocessor expands it to &lt;code&gt;printf("Hello " "Kai")&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Now, it is high time for us to define the &lt;em&gt;magic operator&lt;/em&gt; using macro and stringize operator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is easy to see how does the &lt;em&gt;magic operator&lt;/em&gt; work with an example, which will be given in the next section.&lt;/p&gt;
&lt;h2&gt;3. Quine Implementation&lt;/h2&gt;
&lt;p&gt;With the &lt;em&gt;magic operator&lt;/em&gt;, A simple quine can be implemented as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;
&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let us analyse the above quine. After expanding the macro, the code becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main(){printf(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,s);}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can be seen that the variable &lt;code&gt;s&lt;/code&gt; is a pointer pointing to the string of the code which is written as the parameter of macro &lt;code&gt;Q()&lt;/code&gt;, that is, &lt;code&gt;main(){printf("#define Q(x)char*s=#x;x\nQ(%s)",s);}&lt;/code&gt;, which is also the code after the definition of &lt;code&gt;s&lt;/code&gt; for actual execution. Therefore, with &lt;code&gt;s&lt;/code&gt;, in order to achieve self reproduceing, only &lt;code&gt;#define Q(x)char*s=#x;x&lt;/code&gt; and &lt;code&gt;Q()&lt;/code&gt; should be rewritten in &lt;code&gt;printf()&lt;/code&gt; for output; the string of the other code can just be represented by &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In fact, the approach described above is a general way for quine implementation, which can be seen by considering the following framework:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;
&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the framework, &lt;code&gt;{A}&lt;/code&gt;, &lt;code&gt;{B}&lt;/code&gt;, &lt;code&gt;{C}&lt;/code&gt;, and &lt;code&gt;{D}&lt;/code&gt; can be replaced by any legal code in C, and the feature of self reproducing still holds (In particular, if there exist other variables with identifier &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; should be replaced by some unused identifier).&lt;/p&gt;
&lt;p&gt;With the approach with only a few modifications, we can go even further: implementing more general quines. For example, implement a general quine that outputs all its characters in the odd position when the user inputs "o" and outputs all its characters in the even position when the user inputs "e"; implement a general quine A that can output a general quine B, which can again output the general quine A, forming a "quine loop". As it is not difficult to implement both of them, here the solutions are not given, and these two problems are left for readers who are interested in the topic.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Quine_(computing)"&gt;http://en.wikipedia.org/wiki/Quine_(computing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Code_golf"&gt;http://en.wikipedia.org/wiki/Code_golf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cprogramming.com/tutorial/cpreprocessor.html"&gt;http://www.cprogramming.com/tutorial/cpreprocessor.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com/cprogramming/c_preprocessors.htm"&gt;http://www.tutorialspoint.com/cprogramming/c_preprocessors.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Quine"></category><category term="C/C++"></category><category term="Preprocessing"></category></entry><entry><title>Calculating All Feasible Solutions of Integer Linear Programming with PuLP and SCIP</title><link href="/calculating-all-feasible-solutions-of-ilp.html" rel="alternate"></link><published>2014-07-29T00:00:00+02:00</published><updated>2014-07-29T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2014-07-29:/calculating-all-feasible-solutions-of-ilp.html</id><summary type="html">&lt;p&gt;In this article, PuLP and SCIP are combined together to solve a general problem: given an integer linear programming problem, calculate all feasible solutions efficiently if the number of feasible solutions is not infinite.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Integer linear programming (ILP) is a method to achieve the best outcome in a mathematical model whose requirements are represented by linear relationships and unknown variables are required to be integers. Integer linear programming can be applied to various fields of study and has proved useful in diverse types of problems. In contrast to linear programming, which can be solved efficiently in the worst case, integer linear programming problems are in many practical situations NP-hard. Therefore, solving integer linear programming is not easy. Moreover, despite the fact that there are many professional solvers which can solve integer linear programming efficiently in most cases, most of them can only give one optimal solution even if many solutions exist. However, more than one solution, or even all solutions are needed in some applications.&lt;/p&gt;
&lt;p&gt;In this article, PuLP and SCIP (Solving Constraint Integer Programs) are combined together to solve that general problem, that is, given an integer linear programming problem, calculate all feasible solutions efficiently if the number of feasible solutions is not infinite. Specifically, first, PuLP is used to generate the integer programming model file; then the model file is passed to SCIP and all feasible solutions of the model are calculated with SCIP.&lt;/p&gt;
&lt;p&gt;PuLP is an LP modeler written in python. PuLP can generate MPS or LP files and call GLPK, COIN CLP/CBC, CPLEX, and GUROBI to solve linear problems. SCIP is currently one of the fastest non-commercial solvers for mixed integer programming (MIP) and mixed integer nonlinear programming (MINLP). It is also a framework for constraint integer programming (CIP) and branch-cut-and-price. It allows for total control of the solution process and the access of detailed information down to the guts of the solver.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/scip_fig1.png"&gt;&lt;/p&gt;
&lt;p&gt;The remainder of the article is organized as follows. In section 2, a sample problem is described which is used to illustrate the steps in the other sections. Section 3 shows how to generate the model file. Section 4 shows how to calculating all feasible solutions of a given model file.&lt;/p&gt;
&lt;h2&gt;2. Sample Problem&lt;/h2&gt;
&lt;h4&gt;Problem description:&lt;/h4&gt;
&lt;p&gt;Kai Sun would like to buy 100 chickens with 100 LTC. A rooster, a hen and a chick costs 3 LTC, 2LTC and 0.5LTC respectively. How many roosters, hens and chicks should Kai buy? If there are many solutions, output all of them. &lt;/p&gt;
&lt;p&gt;Convert the problem to ILP: &lt;/p&gt;
&lt;h4&gt;Variables:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Integer x, y, z, d
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Constraints:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x+y+z = 100 
3x+2y+0.5z = 100 
0 &amp;lt;= x, y, z, d
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Objective function:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Minimize d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we use a dummy variable &lt;code&gt;d&lt;/code&gt; because for this problem, there are no objective function need to be optimized.&lt;/p&gt;
&lt;h2&gt;3. Model File Generation&lt;/h2&gt;
&lt;p&gt;With PuLP, it is easy to express the ILP and generate ".lp" file, which can be further read by SCIP. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chicken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpMinimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 0 is the lower bound;&lt;/span&gt;
                                  &lt;span class="c1"&gt;# &amp;quot;None&amp;quot; means no upper bound;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;constraint 1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;constraint 2&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeLP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;problem.lp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, model file "problem.lp" is generated, and the contents of "problem.lp" are shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;\* chicken *\
Minimize
OBJ: __dummy
Subject To
constraint_1: x + y + z = 100
constraint_2: 3 x + 2 y + 0.5 z = 100
Bounds
__dummy = 0
0 &amp;lt;= x
0 &amp;lt;= y
0 &amp;lt;= z
Generals
x
y
z
End
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Calculating All Feasible Solutions&lt;/h2&gt;
&lt;p&gt;With SCIP, all feasible solutions of "problem.lp" can be calculated easily in the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Read model file using &lt;code&gt;read&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCIP&amp;gt; read problem.lp
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the parameters which are required for collecting all feasible solutions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCIP&amp;gt; set emphasis counter
SCIP&amp;gt; set constraints countsols collect TRUE
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculating all feasible solutions using &lt;code&gt;count&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCIP&amp;gt; count
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write all feasible solutions to a file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCIP&amp;gt; write allsolutions chicken_sol.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, file "chicken_sol" contains all feasible solutions of the sample problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#, z, y, x, objval
1(1), 80, 0, 20, 0
2(2), 68, 30, 2, 0
3(3), 70, 25, 5, 0
4(4), 72, 20, 8, 0
5(5), 74, 15, 11, 0
6(6), 76, 10, 14, 0
7(7), 78, 5, 17, 0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tobias Achterberg. SCIP: Solving constraint integer programs. Mathematical Programming Computation, 1(1):1-41, 2009. &lt;a href="http://mpc.zib.de/index.php/MPC/article/view/4"&gt;http://mpc.zib.de/index.php/MPC/article/view/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/PuLP"&gt;https://pypi.python.org/pypi/PuLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Linear_programming"&gt;http://en.wikipedia.org/wiki/Linear_programming&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gnu.org/software/glpk/glpk.html"&gt;http://www.gnu.org/software/glpk/glpk.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.coin-or.org/"&gt;http://www.coin-or.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cplex.com/"&gt;http://www.cplex.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gurobi.com/"&gt;http://www.gurobi.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="SCIP"></category><category term="PuLP"></category><category term="ILP"></category><category term="LP"></category></entry><entry><title>Gomoku/Renju Resouces -- An Overview</title><link href="/gomoku-renju-resources-an-overview.html" rel="alternate"></link><published>2014-07-07T00:00:00+02:00</published><updated>2014-07-07T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2014-07-07:/gomoku-renju-resources-an-overview.html</id><summary type="html">&lt;p&gt;(Last update: 2017-6-23)&lt;/p&gt;
&lt;p&gt;I often recieve emails that ask for gomoku/renju resources, especially for AI design, so I write this article to summarize good resources I know. This page will be maintained and updated in the future. If you find any mistake in this page such as broken links …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Last update: 2017-6-23)&lt;/p&gt;
&lt;p&gt;I often recieve emails that ask for gomoku/renju resources, especially for AI design, so I write this article to summarize good resources I know. This page will be maintained and updated in the future. If you find any mistake in this page such as broken links, please contact me.&lt;/p&gt;
&lt;h2&gt;Reading Materials for AI Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/files/allis-thesis.pdf"&gt;&lt;strong&gt;Searching for Solutions in Games and Artificial Intelligence&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://chessprogramming.wikispaces.com/"&gt;&lt;strong&gt;Chess Programming Wiki&lt;/strong&gt;&lt;/a&gt; is a website which provides good reference for every aspect of chess programming. Although it mainly talks about chess, some basic techniques and ideas of chess AI design are similiar to those of gomoku/renju.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sze.hu/~gtakacs/download/wagnervirag_2001.pdf"&gt;&lt;strong&gt;Solving Renju&lt;/strong&gt;&lt;/a&gt; by Janos Wagner, Istvan Virag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gomocup.org/old/download.php?filename=GO-MOKU-AND-THREAT.ZIP"&gt;&lt;strong&gt;Go-Moku and Threat-Space Search&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis, Hendrik Jacob Herik, and M.P.H. Huntjens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/files/allis-paper-1.pdf"&gt;&lt;strong&gt;Go-Moku Solved by New Search Techniques&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis, Hendrik Jacob Herik, and M.P.H. Huntjens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sciencedirect.com/science/article/pii/0004370294900043"&gt;&lt;strong&gt;Proof-number Search&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis, Maarten van der Meulen, and H. Jaap Van Den Herik.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="http://www.xqbase.com/computer.htm"&gt;&lt;strong&gt;XQ Base&lt;/strong&gt;&lt;/a&gt; is a website which provides basic articles on chess programming. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="/files/introduction_to_xl.pdf"&gt;&lt;strong&gt;Introduction to XL&lt;/strong&gt;&lt;/a&gt; by Chengtao Chen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="/pn-search-and-db-search.html"&gt;&lt;strong&gt;Summary of Pn-search and Db-search&lt;/strong&gt;&lt;/a&gt; by Kai Sun.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Competitive Open-source AIs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://sourceforge.net/projects/piskvork/"&gt;&lt;strong&gt;Pela&lt;/strong&gt; (with piskvork)&lt;/a&gt; by Petr Lastovicka, Czech Republic. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Carbon Gomoku (with its documents in Polish)&lt;/strong&gt; (&lt;a href="http://mczard.republika.pl/gomoku.en.html"&gt;Original version&lt;/a&gt;, or &lt;a href="https://github.com/gomoku/Carbon-Gomoku"&gt;Modified version&lt;/a&gt; which supports Gomocup protocol) by Michał Czardybon, Poland. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Niren (XL)&lt;/strong&gt; (&lt;a href="/files/niren_source.zip"&gt;Original version&lt;/a&gt;, or &lt;a href="https://github.com/accreator/xl-engine"&gt;Modified version&lt;/a&gt; which supports Gomocup protocol) by Chengtao Chen, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/ChisBread/Chis"&gt;&lt;strong&gt;Chis&lt;/strong&gt;&lt;/a&gt; by Peiming Zheng, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/jinjiebang/wine"&gt;&lt;strong&gt;Wine&lt;/strong&gt;&lt;/a&gt; by Jinjie Wang, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stahlfaust (with its documents)&lt;/strong&gt; (&lt;a href="http://www.nowozin.net/sebastian/tu-berlin-2006/stahlfaust/"&gt;Original version&lt;/a&gt;, or &lt;a href="https://github.com/gomoku/Stahlfaust---Gomoku-AI-player"&gt;Modified version&lt;/a&gt; which supports Gomocup protocol) by Marco Kunze and Sebastian Nowozin, Germany.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/files/gm2_source.zip"&gt;&lt;strong&gt;GM2&lt;/strong&gt; (with part of its documents in Chinese)&lt;/a&gt; by Feng Liu, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://aean.net/kalscope/"&gt;&lt;strong&gt;KalScope&lt;/strong&gt;&lt;/a&gt; by Aean, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/files/qingyue_source.zip"&gt;&lt;strong&gt;Qingyue Renju&lt;/strong&gt;&lt;/a&gt; by Cong Zhang, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.petricek.net/pisq_src.zip"&gt;&lt;strong&gt;Pisq&lt;/strong&gt;&lt;/a&gt; by Martin Petricek, Czech Republic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Open-source GUIs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://sourceforge.net/projects/piskvork/"&gt;&lt;strong&gt;Piskvork&lt;/strong&gt;&lt;/a&gt; by Petr Lastovicka, Czech Republic. It is a GUI that supports Gomocup protocol. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.renju.se/renlib/"&gt;&lt;strong&gt;Renlib&lt;/strong&gt;&lt;/a&gt; by Frank Arkbo, Sweden. Renlib is one of the best programs which can help you to build a library of renju openings, analysis and played games. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/accreator/Yixin-Board"&gt;&lt;strong&gt;Yixin Board&lt;/strong&gt;&lt;/a&gt; by Kai Sun, China. It is a specially designed GUI for Yixin, supporting Yixin protocol. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Protocols for Computer Gomoku/Renju&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gomocup Protocol&lt;/strong&gt; (&lt;a href="http://petr.lastovicka.sweb.cz/protocl1en.htm"&gt;via files&lt;/a&gt; or &lt;a href="http://petr.lastovicka.sweb.cz/protocl2en.htm"&gt;via stdin/stdout&lt;/a&gt;) by Petr Lastovicka, Czech Republic. The protocol is used in &lt;a href="http://gomocup.org/"&gt;Gomocup&lt;/a&gt;, and tens of AIs support it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/accreator/Yixin-protocol"&gt;&lt;strong&gt;Yixin Protocol&lt;/strong&gt;&lt;/a&gt; by Kai Sun, China. The protocol is derived from Gomocup protocol. Compared with Gomocup protocol, Yixin protocol introduces more commands enabling &lt;a href="/pages/yixin.html"&gt;Yixin&lt;/a&gt; to have some new features such as renju rule support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="/files/botzone_protocol.zip"&gt;&lt;strong&gt;Botzone Protocol&lt;/strong&gt;&lt;/a&gt; by AI LAB, Peking University. &lt;a href="http://botzone.org/"&gt;Botzone&lt;/a&gt; is an online platform for AI competitions. Since it was updated in 2014 and lost all old data, the old protocol listed here is replaced by a new protocol, and the old one is no longer supported by Botzone's online platform. The old protocol can still be used in the offline AI testing program. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AI Competition and Online Platform&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gomocup.org/"&gt;&lt;strong&gt;Gomocup&lt;/strong&gt;&lt;/a&gt; (2000 - Present) (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.grappa.univ-lille3.fr/icga/game.php?id=30"&gt;&lt;strong&gt;Computer Olympiad&lt;/strong&gt;&lt;/a&gt; (1989 - 1992)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Renju Computer World Championship&lt;/strong&gt; (&lt;a href="http://www.5stone.net/wc/worldcup_en.html"&gt;1991&lt;/a&gt;, &lt;a href="http://www.5stone.net/wc/worldcup_en.html"&gt;1998&lt;/a&gt;, &lt;a href="http://www.5stone.net/wc/worldcup_en.html"&gt;2000&lt;/a&gt;, 2004(&lt;a href="http://nosovsky.narod.ru/forth.html"&gt;link1&lt;/a&gt;,&lt;a href="http://renju.se/rif/news04.htm#36"&gt;link2&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hungarian Computer Go-Moku Open Tournament&lt;/strong&gt; (2005 (&lt;a href="http://gomokuworld.com/articles/hungarian_computer_gomoku_tournament_2005"&gt;1st&lt;/a&gt;, &lt;a href="http://www.sze.hu/~gtakacs/tournament/index.html"&gt;2nd&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://botzone.org/"&gt;&lt;strong&gt;Botzone&lt;/strong&gt;&lt;/a&gt; (2010 - Present)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AI vs. Human Tournament&lt;/strong&gt; (&lt;a href="http://gomocup.org/results/ai-human-2006"&gt;2006&lt;/a&gt;, 2011(&lt;a href="http://gomocup.org/results/ai-human-2011/"&gt;en&lt;/a&gt;,&lt;a href="http://www.piskvorky.cz/clanky/zajimavosti-ze-sveta-piskvorek-a-renju/ai-vs-clovek-2011-2/"&gt;cz&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Yixin vs. Human Player&lt;/strong&gt; (&lt;a href="/ai-vs-human-3rd-qtrc2016.html"&gt;match with Alexander Bogatirev, 2016&lt;/a&gt;, &lt;a href="/ai-vs-human-renju.html"&gt;match with Epifanov Dmitry, 2016&lt;/a&gt;, &lt;a href="/ai-vs-human-gomoku.html"&gt;match with Nikonov Konstantin, 2017&lt;/a&gt;, &lt;a href="/ai-vs-human-gomoku.html"&gt;match with Makarov Pavel, 2017&lt;/a&gt;) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://w-ai.org/"&gt;&lt;strong&gt;WAI&lt;/strong&gt;&lt;/a&gt; (2012 - 2014, the website is down)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Famous, Competitive, and Interesting AI List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Amoeba&lt;/strong&gt; by Galli Zoltan, Hungary. It uses Monte-Carlo tree search (MCTS) rather than commonly used algorithms such as alpha-beta search. It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blackstone&lt;/strong&gt; by Victor Barykin, Russia. It is a commercial software for renju. It is the winner in tournament of the 2nd and the 3rd Renju Computer World Championship (1998, 2000), and the winner in solving problems of the 2nd Renju Computer World Championship (1998).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Carbon&lt;/strong&gt; by Michał Czardybon, Poland. It is the strongest open-source gomoku software. Its original version can be downloaded at &lt;a href="http://mczard.republika.pl/gomoku.en.html"&gt;Michał Czardybon's Homepage&lt;/a&gt;, and its modified version by Petr Lastovicka which supports Gomocup protocol can be obtained from &lt;a href="https://github.com/gomoku/Carbon-Gomoku"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fiver&lt;/strong&gt; by Meng Liu, China. A famous classic gomoku engine. It can be downloaded &lt;a href="/files/fiver6_8_en.zip"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goro&lt;/strong&gt; by Victor Barykin, Russia. It is a commercial software for gomoku, the winner of the 6th, the 7th, the 10th, and the 11th Gomocup (2005, 2006, 2009, 2010). It took part in both the first and the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2006 and 2011. Goro ranked the 3rd in the 18th Gomocup (2017). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hector for Gomoku&lt;/strong&gt; by Csaba Jergler, Hungary. It is a general game playing search core module (Hector) along with a compile time connected game specific gomoku module. It took part in Gomocup from 2008 to 2010 and ranked the 9th in the 11th Gomocup (2010). It has been excluded from Gomocup since 2011 because the old version of Hector stopped working and the author did not send the new version to Gomocup. It is not published, so there is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hewer&lt;/strong&gt; by Tomas Kubes, Czech Republic. Hewer ranked the 6th in the 18th Gomocup (2017). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HGarden&lt;/strong&gt; by Bingqing Han, China. It took part in the first AI vs. Human tournament, playing against one of the best Czech gomoku players in 2006. HGarden was disqualified in Gomocup 2017 since it was accused of plagiarizing Carbon Gomoku. It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Meijin&lt;/strong&gt; by Oleg Stepanov, Russia. It played against human players in &lt;a href="http://www.renju.net/media/news/news00a.htm"&gt;Moscow Open Tournament&lt;/a&gt;, 2000, making it become the first program playing with human players in public competitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pela&lt;/strong&gt; by Petr Lastovicka, Czech Republic. Pela was the winner of the &lt;a href="http://www.lupa.cz/clanky/piskvorky-o-100-tisic-korun/"&gt;Microsoft gomoku tournament&lt;/a&gt;. It was once the strongest open-source gomoku engines before Carbon was ported to support Gomocup protocol. It is one of the best known strong open-source gomoku engines. It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pisq&lt;/strong&gt; by Martin Petricek, Czech Republic. It is the winner of the 1st and the 2nd Gomocup (2000, 2001). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Onix&lt;/strong&gt; by Janos Wagner and Istvan Virag, Hungary. It is the winner of &lt;a href="http://gomokuworld.com/articles/hungarian_computer_gomoku_tournament_2005"&gt;the 1st Hungarian Computer Go-Moku Open Tournament&lt;/a&gt;, 2005. Onix ranked the 7th in the 18th Gomocup (2017). Onix can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Renjusolver&lt;/strong&gt; by Xiangdong Wen. It is a commercial software for both gomoku and renju. It is the winner in solving problems of the 4th Renju Computer World Championship, 2004. It took part in the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2011. Renjusolver ranked the 2nd in the 18th Gomocup (2017). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.wind23.com/gomokuai.html"&gt;&lt;strong&gt;SlowRenju&lt;/strong&gt;&lt;/a&gt; by Tianyi Hao, China. It is a free software supporting multiple platforms, and its &lt;a href="http://www.wind23.com/gomokuai.html"&gt;Android version&lt;/a&gt; is the strongest free gomoku and renju AIs for Andorid. SlowRenju ranked the 4th in the 18th Gomocup (2017). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.5stone.net/"&gt;&lt;strong&gt;Super&lt;/strong&gt;&lt;/a&gt; by Tongxiang Zhang, China. It is the winner in solving problems of the 3rd Renju Computer World Championship (2000).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Swine&lt;/strong&gt; by Jirka Fontan, Czech Republic. It is the winner of the 4th and the 5th Gomocup (2003, 2004). It took part in the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2011. Swine ranked the 8th in the 18th Gomocup (2017). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tito&lt;/strong&gt; by Andrej Tokarjev, Hungary. It is the winner of the 8th, the 9th, and 12th Gomocup (2007, 2008, 2011). It took part in both the first and the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2006 and 2011. Tito ranked the 5th in the 18th Gomocup (2017). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trunkat&lt;/strong&gt; by Jiri Trunkat. It is the winner of the 3rd Gomocup (2002). Trunkat can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sze.hu/~gtakacs/tyson.html"&gt;&lt;strong&gt;Tyson&lt;/strong&gt;&lt;/a&gt; by Gabor Takacs, Hungary. It is winner of &lt;a href="http://www.sze.hu/~gtakacs/tournament/index.html"&gt;the 2nd Hungarian Computer Go-Moku Open Tournament&lt;/a&gt;, 2005. It is not published, so there is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vertex&lt;/strong&gt; by Artyom Shaposhnikov and Alexander Nosovsky, Russia. It is the winner of the 1st Renju Computer World Championship, 1991. There is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Victoria&lt;/strong&gt; by V. Allis and L Schoenmaker, Netherlands. It is the first program which is bound to win if it moves first for both freestyle and standard gomoku without modern opening rules. It is the winner of gomoku in the 4th Computer Olympiad. Victoria is not published, so there is no download available. Refer to &lt;a href="/files/allis-thesis.pdf"&gt;Allis's thesis&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/pages/yixin.html"&gt;&lt;strong&gt;Yixin&lt;/strong&gt;&lt;/a&gt; by Kai Sun, China. It is a free software for both gomoku and renju. It is the winner of the 13th, 14th, 15th, 16th, 17th and 18th Gomocup (2012, 2013, 2014, 2015, 2016, 2017).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Useful Software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://renjubase.narod.ru/"&gt;&lt;strong&gt;RenjuBase&lt;/strong&gt;&lt;/a&gt; by Vladimir Filinov, Russia. It is a free software that can read various database formats of gomoku/renju and show statistics. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RenArtist&lt;/strong&gt; by Yusuke Okuno, Japan. It gives a good solution about making databases and publish them directly on the web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bf92.com/soft/five/five.htm"&gt;&lt;strong&gt;Gomoku Terminator&lt;/strong&gt;&lt;/a&gt; by Shanshan Liu, China. It is a free software which is bound to win if it moves first for freestyle gomoku without modern opening rules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rules and Variations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prepared Balanced Opening&lt;/strong&gt; is the most popular opening rule in computer gomoku. It is used by both Hungarian Computer Go-Moku Open Tournament and Gomocup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/openings_gomocup14.png"&gt;&lt;/p&gt;
&lt;p&gt;(3 prepared balanced openings used in the 15th Gomocup (provided by Alexander Bogatirev, manager of Team Russia online, member of Gomoku Committee RIF, 2014))&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://renju.net/media/showrule.php?rule=11"&gt;&lt;strong&gt;Gomoku swap2&lt;/strong&gt;&lt;/a&gt; is an opening rule for gomoku. The rule is as follows: (1) The first player puts 2 black and 1 white stones anywhere on the board; (2) The second player has 3 options: a. stay with white; b. swap; c. put 2 more stones and let the opponent choose the colour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/RIF_opening_rule"&gt;&lt;strong&gt;RIF opening rule&lt;/strong&gt;&lt;/a&gt; is an opening rule for renju adopted by Renju International Federation in 1996.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Yamaguchi_opening_rule"&gt;&lt;strong&gt;Yamaguchi opening rule&lt;/strong&gt;&lt;/a&gt; is an opening rule for renju developed by Japanese player Yusui Yamaguchi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Soos%C3%B5rv_opening_rule"&gt;&lt;strong&gt;Soosõrv opening rule&lt;/strong&gt;&lt;/a&gt; is an opening rule for renju developed by Estonian player Ants Soosõrv.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Swap after first move&lt;/strong&gt; is an opening rule for gomoku. The rule is as follows. (1) The first player puts 1 black stone anywhere on the board; (2) The second player has 2 options: a. stay with white; b. swap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Pente"&gt;&lt;strong&gt;Pente&lt;/strong&gt;&lt;/a&gt; is a strategy board game for two or more players similar to gomoku/renju.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Connect6"&gt;&lt;strong&gt;Connect 6&lt;/strong&gt;&lt;/a&gt; is a two-player strategy game similar to gomoku/renju.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Useful Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.renju.net/"&gt;&lt;strong&gt;The homepage of Renju International Federation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gomokuworld.com/"&gt;&lt;strong&gt;Gomoku World&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.renjuoffline.com/"&gt;&lt;strong&gt;Renju Offline&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.playok.com/"&gt;&lt;strong&gt;PlayOK&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.littlegolem.net/"&gt;&lt;strong&gt;Little Golem&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Czech) &lt;a href="http://www.piskvorky.cz/"&gt;&lt;strong&gt;Piskvorky.cz&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Polish) &lt;a href="http://gomoku.pl/"&gt;&lt;strong&gt;Gomoku.pl&lt;/strong&gt;&lt;/a&gt; (&lt;a href="http://forum.gomoku.pl/"&gt;Forum&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="http://www.iwzq.com/"&gt;&lt;strong&gt;Iwzq.com&lt;/strong&gt;&lt;/a&gt; (&lt;a href="http://www.iwzq.com/index.asp"&gt;Forum&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Estonian) &lt;a href="http://renju.ee/"&gt;&lt;strong&gt;Renju.ee&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="gomoku"></category><category term="renju"></category><category term="resource"></category></entry><entry><title>Moving my blog from GAE to Github Pages</title><link href="/moving-my-blog-to-github.html" rel="alternate"></link><published>2014-07-01T00:00:00+02:00</published><updated>2014-07-01T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2014-07-01:/moving-my-blog-to-github.html</id><summary type="html">&lt;p&gt;Due to the resource limitation of GAE for free users as well as maintainance of the blog system Micolog being stopped for a long time, I decide to move my blog from GAE to Github Pages.&lt;/p&gt;
&lt;p&gt;Since Github only accepts static site with HTML, images CSS, JS, etc., a static …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Due to the resource limitation of GAE for free users as well as maintainance of the blog system Micolog being stopped for a long time, I decide to move my blog from GAE to Github Pages.&lt;/p&gt;
&lt;p&gt;Since Github only accepts static site with HTML, images CSS, JS, etc., a static site generator is needed for me to make the work of site publishing easy. Fortunately, there are many tools to do this work such as Octopress and Pelican. I choose Pelican because I am more familiar with Python, though the whole process of generating the static site needs little knowledge about Python (I believe for users of Octopress, they also do not need to be familiar with Ruby :) ). As pelican supports writing posts in markdown, in the future, I will no longer struggle with formatted text.&lt;/p&gt;
&lt;p&gt;Things went well during the migration, except that there was a little problem about date format of the theme bootstrap. The problem was easily solved with the help of &lt;a href="https://github.com/getpelican/pelican/issues/816"&gt;https://github.com/getpelican/pelican/issues/816&lt;/a&gt;.&lt;/p&gt;</content><category term="pelican"></category></entry><entry><title>Paper translation: "All about Eve: Execute-Verify Replication for Multi-Core Servers"</title><link href="/paper-translation-all-about-eve.html" rel="alternate"></link><published>2013-12-10T00:00:00+01:00</published><updated>2013-12-10T00:00:00+01:00</updated><author><name>Kai Sun</name></author><id>tag:None,2013-12-10:/paper-translation-all-about-eve.html</id><summary type="html">&lt;p&gt;Translating a paper is one of the homework of our computer system class. I was given the paper "All about Eve: Execute-Verify Replication for Multi-Core Servers", which takes several days for me to translate. Now I make it public and wish it can help some people's study.&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/translation_all_about_eve.pdf"&gt;Download&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Translating a paper is one of the homework of our computer system class. I was given the paper "All about Eve: Execute-Verify Replication for Multi-Core Servers", which takes several days for me to translate. Now I make it public and wish it can help some people's study.&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/translation_all_about_eve.pdf"&gt;Download&lt;/a&gt;&lt;/p&gt;</content><category term="translation"></category><category term="system"></category></entry><entry><title>Improvement of Yixin</title><link href="/improvement-of-yixin.html" rel="alternate"></link><published>2013-09-14T00:00:00+02:00</published><updated>2013-09-14T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2013-09-14:/improvement-of-yixin.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I spent some time trying optimizing Yixin's search and evaluation. The result is good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I received two bug reports and both of them are about Yixin's rule and they all influence Yixin's strength. These bugs have been fixed now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;update(2013.9.29):&lt;/p&gt;
&lt;p&gt;The test result of Yixin 0.2 …&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I spent some time trying optimizing Yixin's search and evaluation. The result is good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I received two bug reports and both of them are about Yixin's rule and they all influence Yixin's strength. These bugs have been fixed now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;update(2013.9.29):&lt;/p&gt;
&lt;p&gt;The test result of Yixin 0.2.24&lt;/p&gt;
&lt;p&gt;300s/1000s&lt;/p&gt;
&lt;p&gt;37 balanced openings&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Yixin loses&lt;/th&gt;
&lt;th&gt;Yixin wins&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Tito10&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swine11&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Renjusolver(H6)&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hewer12&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="yixin"></category></entry><entry><title>A simple "Rock Scissors Paper" AI</title><link href="/a-simple-rock-scissors-paper-ai.html" rel="alternate"></link><published>2011-11-17T00:00:00+01:00</published><updated>2011-11-17T00:00:00+01:00</updated><author><name>Kai Sun</name></author><id>tag:None,2011-11-17:/a-simple-rock-scissors-paper-ai.html</id><summary type="html">&lt;p&gt;The idea comes from the following page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nytimes.com/interactive/science/rock-paper-scissors.html"&gt;http://www.nytimes.com/interactive/science/rock-paper-scissors.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just for fun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define MAXSEQ 4&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;LOSE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;DRAW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;WIN …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The idea comes from the following page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nytimes.com/interactive/science/rock-paper-scissors.html"&gt;http://www.nytimes.com/interactive/science/rock-paper-scissors.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just for fun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define MAXSEQ 4&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;LOSE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;DRAW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;WIN&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Rock     &amp;lt;-&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;S&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Scissors &amp;lt;-&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;P&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paper    &amp;lt;-&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;{&lt;/span&gt;
                                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                                        &lt;span class="p"&gt;{&lt;/span&gt;
                                                &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                        &lt;span class="p"&gt;}&lt;/span&gt;
                                        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                                        &lt;span class="p"&gt;{&lt;/span&gt;
                                                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                        &lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paper   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Rock    &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Scissors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;COMPUTER %s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;l=%d d=%d w=%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                        &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="AI"></category><category term="rock scissors paper"></category><category term="game"></category></entry><entry><title>Bug &amp; Bug</title><link href="/bug-and-bug.html" rel="alternate"></link><published>2011-03-30T00:00:00+02:00</published><updated>2011-03-30T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:None,2011-03-30:/bug-and-bug.html</id><summary type="html">&lt;p&gt;Although my old AI supports standard game, I know there exists some bugs while using that rule.And at the same time I got the new gmotor, I tested gmotor2011 yesterday and found that it performed better than Yixin with standard rule, so I tried to fix these bugs. The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although my old AI supports standard game, I know there exists some bugs while using that rule.And at the same time I got the new gmotor, I tested gmotor2011 yesterday and found that it performed better than Yixin with standard rule, so I tried to fix these bugs. The work was boring but didn't take a long time. It seems OK, but when I decided to test a game between Yixin and gmotor with Piskvork, Yixin still didn't perform well. I checked Yixin again and again, but no bug was found. So I started to suspect the Piskvork. The latter tests proved I was right. Piskvork8.4 has a bug: When you choose to start a TOURNAMENT with standard-game rule, the Piskvork will not send message"info_exact5=1" to AI. You may ask me why gmotor still obey that rule. After testing it I conclude that gmotor only knows the standard rule, that means it doesn't consider more than 5 stones as win even if you set the freestyle rule.&lt;/p&gt;
&lt;p&gt;You can easily find the bug using this opening: 0,0, -5,-5, 0,1, 5,5, 0,-1, -5,-6, 0,3, 5,6, 0,4&lt;/p&gt;
&lt;p&gt;Or you can find the bug by writing such an AI function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;brain_turn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;pipeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MESSAGE %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info_exact5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isFree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pipeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DEBUG %d coordinates didn&amp;#39;t hit an empty field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;do_mymove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="bug"></category><category term="piskvork"></category><category term="gmotor"></category><category term="yixin"></category></entry></feed>