<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>AI EXP</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-01-02T00:00:00+01:00</updated><entry><title>Pn-search &amp; Db-search 总结</title><link href="/pn-search-and-db-search.html" rel="alternate"></link><updated>2015-01-02T00:00:00+01:00</updated><author><name>孙锴</name></author><id>tag:,2015-01-02:pn-search-and-db-search.html</id><summary type="html">&lt;p&gt;对于五子棋引擎的设计者，Allis的“Searching for Solutions in Games and Artificial Intelligence”一文是很值得阅读的。这篇文章介绍了终结原始规则下的无禁手五子棋的两个核心技术——Proof-number Search (Pn-search)和Dependency-based Search (Db-search)。然而原文为了表达上的细致和严谨，写得比较长，读起来比较费时间。因最近在为Yixin增加独立的算杀模块，翻阅了一下曾经的阅读笔记，感觉这份笔记无论对于初次阅读者、还是文献回顾者都是有一定帮助的，所以决定分享一下这份总结。由于Allis的这篇文章有不止一个版本，为了引用的准确，总结中以&lt;a href="/files/allis-thesis.pdf"&gt;&lt;strong&gt;这个版本&lt;/strong&gt;&lt;/a&gt;为准。&lt;/p&gt;
&lt;p&gt;对于这篇论文的阅读（和讲解），不建议按照顺序阅读，而建议先看&lt;strong&gt;例子&lt;/strong&gt;。以下是总结原文。&lt;/p&gt;
&lt;h3&gt;Pn-search&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;例子:&lt;/strong&gt; 23页下~25页上&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伪代码：&lt;/strong&gt; 25~28页&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已经solved的子树在update后即可被删除。(29页)&lt;/li&gt;
&lt;li&gt;Pn^2-search：思想为建立两层树，上层是N个节点的树，对于树的每个叶子，对应一个即时建立即时删除的N个节点的树，可以在对效率影响不大的前提下减少空间。（空间是pn-search的1/2次幂。(30页)&lt;/li&gt;
&lt;li&gt;Update的过程中，遇到的第一个proof和disproof number都未改变的节点停止更新，并且下一轮的迭代从这个节点开始。(32页)&lt;/li&gt;
&lt;li&gt;当一个节点被建立时，其proof和disproof number的初始化可以通过知识给定，比如若可以计算到该节点的儿子数（或约数），则可以令其proof number为1，disproof number为儿子数（或约数）。(34页)实际上还可以做其它方面的初始化设定，比如37页上半部分的例子。37页下~38页上给出了另一个例子，是对于gomoku的，可以用层数(ply)的一半来初始化（实际上是1+d/2取下整(148页)）。论文中提到对于pn-search初始化问题仍缺乏合适的理解。(39页上)&lt;/li&gt;
&lt;li&gt;置换表用于解决实际是DAG而非Tree中的pn-search问题，一种practical的做法是将DAG看做树，standard的做法是利用置换表解决该问题，论文提到经验上二者效果差不多。(40页)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Db-search&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;例子：&lt;/strong&gt; 85页下~88页上&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;伪代码：&lt;/strong&gt; 88页~90页&lt;/p&gt;
&lt;h3&gt;Solving gomoku&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Db-search部分优化：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;global defensive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a) 在对方第i步棋后，目标是占有进攻方形成threat aj的区域，或我方应有的reply dj，使得j&amp;gt;=i。
b) 在检查中，不再做攻方的global defensive检查。
c) 只检查更高的威胁。
(137页)
对于138页中28 squares的解释：1是7，源于_ _ _ X X _ _是7格区域，其它解释相似。
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在一次db-search中已经找到的potential winning threat sequences超过了T（也就是说明前T次都被找到了global sefensive），则终止。Gomoku中经验值为T=10。(140页)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;如果防守方有category为c1的威胁，则攻击方的威胁c2必须小于c1。此优化在检查global defensive时需关掉（显然）。(140下~141上)&lt;/li&gt;
&lt;li&gt;只有在fT2,g7不可用时才使用fT3,g6。(141页)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Pn-search部分优化：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;置换表，注意还要检查8个同构形。(143下~144上)&lt;/li&gt;
&lt;li&gt;限制黑棋（进攻方）的儿子数为10，排序标准是4分（可形成活三且有2个防点），3分（可形成活三有3个防点），2分（活二），1分（跳二）。(144)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相关区域：为了使得一个threat sequence可以对付多个move（主要是战场外的着法），先make一个null move，然黑棋（进攻方）找到一个threat sequence，然后根据此sequence定义相关区域。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;a) 定义：一个点属于相关区域，当且仅当其满足以下至少一点：(1)是威胁序列中的点（在line内即可，类似_ _ _ X X _ _的7格区域所有空点都是）。(2)与威胁序列中的白棋和原有白棋可形成新的威胁的点。(146)
b) 在相关区域被定义后，对于区域中的一个点s，如果s落子后通过db-search判断确实没有对应threat sequence，则将s加入儿子，否则，利用找到的threat-sequence可以按照上述方法得到另一个相关区域，而这个相关区域与原相关区域的交作为新的相关区域。(147)
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于一个局面，在棋盘上的棋子大于等于9个的前提下，如果进攻方（黑棋），在白棋make一个null move后仍没有threat sequence，则将这个局面定义为白棋胜。(147)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Proof number和disproof number的初始化均采用1+d/2取下整。(148)&lt;/li&gt;
&lt;/ol&gt;</summary><category term="人机对弈"></category><category term="五子棋"></category><category term="Pn-search"></category><category term="Db-search"></category></entry><entry><title>SLT2014参会小结</title><link href="/SLT2014.html" rel="alternate"></link><updated>2014-12-24T00:00:00+01:00</updated><author><name>孙锴</name></author><id>tag:,2014-12-24:SLT2014.html</id><summary type="html">&lt;h3&gt;全世界最美的地方之一&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20141.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我同俞老师和陈露于12月6日至12日赴美参加了&lt;strong&gt;SLT&lt;/strong&gt; 2014 (2014 IEEE &lt;strong&gt;S&lt;/strong&gt;poken &lt;strong&gt;L&lt;/strong&gt;anguage &lt;strong&gt;T&lt;/strong&gt;echnology Workshop)，这是我和陈露第一次参加国际会议。今年&lt;strong&gt;SLT&lt;/strong&gt;将会议地点选在了横跨加利福尼亚州和内华达州的南太浩湖（&lt;strong&gt;S&lt;/strong&gt;outh &lt;strong&gt;L&lt;/strong&gt;ake &lt;strong&gt;T&lt;/strong&gt;ahoe），地点首字母与会议首字母相同的设定应该不是巧合。这座城的名字指示了它的位置——太浩湖的南岸。太浩湖是北美最大的高山湖泊、美国境内的第二大湖，曾被马克·吐温誉为“全世界最美的地方之一”。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20143.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;南太浩湖不仅风景优美，而且是滑雪、赌博度假地。会议因此在Best Poster评选中使用了扑克牌作为投票工具。&lt;/p&gt;
&lt;h3&gt;SIG Meetings&lt;/h3&gt;
&lt;p&gt;SLT支持参与者开展SIG(Special Interest Group: 特别兴趣小组)会议，并提供必要的场地和硬件设施。我们参与了两个SIG会议，分别是对DSTC4(Dialog State Tracking Challenge 4)筹办的讨论，以及DSTC3(Dialog State Tracking Challenge 3)结果和所用技术的讨论。下图是SIG会议中俞老师对我们DSTC3系统介绍时的照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20146.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Tutorial &amp;amp; Invited Talks&lt;/h3&gt;
&lt;p&gt;和大多数学术会议一样，SLT有Tutorial和Invited Talks。今年Tutorial包括“Deep Learning and Continuous Representations for Language Processing”以及“Multi-view Learning of Representations for Speech and Language”两部分内容，Invited Talks包括“Large-scale Kernel Methods for Acoustic Modeling”和“Subspace Modeling Techniques in Speech and Language Processing”。其中给我印象最深的是Xiaodong He与Scott Wen-tau Yih介绍的最近深度学习(Deep Learning)在连续空间表示中的进展，如在信息检索(Information Retrieval)中DSSM(Deep Structured Semantic Models)的使用。&lt;/p&gt;
&lt;h3&gt;Panel Sessions&lt;/h3&gt;
&lt;p&gt;Panel Sessions分两天讨论了在大数据和机器学习时代下过去、现在以及未来的语音技术，和如何培养下一代语音技术的科学家和工程师两个话题。下图是俞老师作为第一个话题的辩论员的演讲照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20147.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;值得注意的是，在下一代语音技术科学家和工程师培养方面，Panel Sessions的各领域学者普遍强调了对工程能力的训练，尤其是要实现具体的算法，而不是单纯调用已有的(开源)库。&lt;/p&gt;
&lt;h3&gt;Poster &amp;amp; Demo Sessions&lt;/h3&gt;
&lt;p&gt;除了一篇best paper外，SLT2014没有oral presentation，所以Poster和Demo就构成了SLT论文展示的全部。我们的两篇论文都被安排在会议第三天上午展示。下图分别是我们三人的合影，以及我和陈露对论文做讲解的照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20142.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20144.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/slt20145.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我在会议里主要关注点在于对话方面，尤其是对话状态跟踪(Dialogue State Tracking)。除了在会前剑桥公布在网上的给予RNN的状态跟踪模型(题为Robust Dialog State Tracking Using Delexicalised Recurrent Neural Networks and Unsupervised Adaptation)外，在这个领域里来自IBM的一篇基于知识的规则模型(题为Knowledge-based Dialog State Tracking)是比较有趣的，它进一步地探索了基于规则的模型，并声称获得了迄今为止最好的结果。&lt;/p&gt;
&lt;p&gt;最后列出其它几篇比较好/有意思的文章&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PT2.202 Temporal Supervised Learning for Inferring a Dialog Policy from Example Conversations&lt;/li&gt;
&lt;li&gt;PM3.101 Deep Order Statistic Networks&lt;/li&gt;
&lt;li&gt;PT4.206 An Efficient Error Correction Interface for Speech Recognition on Mobile Touchscreen Devices&lt;/li&gt;
&lt;li&gt;PW2.207 Dynamically Supporting Unexplored Domains in Conversational Interactions by Enriching Semantics with Neural Word Embedding&lt;/li&gt;
&lt;li&gt;PM4.201 Spoken Language Understanding Using Long Short-Term Memory Neural Networks&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;社交&lt;/h3&gt;
&lt;p&gt;除了前文介绍的会议的学术内容外，会议的另一个作用是为参会者提供了一个良好的社交平台。此次会议上我认识了许多剑桥语音组的研究者，以及微软研究院，卡耐基梅隆大学，斯坦福大学，俄亥俄州立大学，华盛顿大学等等来自世界各地的同领域研究者。&lt;/p&gt;</summary><category term="会议"></category><category term="SLT"></category></entry><entry><title>真实世界的我</title><link href="/%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E6%88%91.html" rel="alternate"></link><updated>2014-09-28T00:00:00+02:00</updated><author><name>孙锴</name></author><id>tag:,2014-09-28:真实世界的我.html</id><summary type="html">&lt;h3&gt;文章引子&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;年轻人应花更多的时间在前方的道路上，所以非“总结”类的回忆性文章，我是不愿意花时间写的&lt;/strong&gt;。可是在我没有达成物质独立前，总会遇到由此引发的难缠的问题。为了从莙政项目那里拿到一笔参加SLT2014的费用补贴，我被要求接受采访，同以往我能够爽快地拒绝不同，接受采访意味着可以拿到补贴，进而为实验室节省一笔不小的开支，这是很难拒绝的。怎奈和以往媒体给我留下的糟糕的印象一样，此次采访结束后，发给我的草稿中的我和我的导师都被进行了文学加工，变了样子。为了让采访文章的正式稿描绘出一个真实的我，在同莙政项目老师的沟通后，我同意写一篇文章介绍我的科研道路，而莙政项目同意根据此文，以及补充采访，修正此前采访稿的诸多不实之处。下文正是我交给莙政项目的文章。&lt;strong&gt;由于时间仓促，写到三、四节的时候已接近最后提交期限，所以内容略有混乱，亦缺乏部分细节和必要衔接，还望读者见谅&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;一．中国象棋与楚汉棋缘&lt;/h3&gt;
&lt;p&gt;我从小喜欢下中国象棋。初中的时候，常和朋友们在课间，或者课上（体育课）下棋，在班级的棋力排行老二，常败于许同学（棋力排行老大）。出于提高棋力战胜许同学，和在家里消遣的目的，我从网上找到了一个叫“楚汉棋缘”的象棋软件学习。然而，楚汉棋缘给我的主要影响，并不是让我了解并学会了“铁门闩”等杀招，而是我发现，我那时自命不凡的棋力，在“初级电脑”难度下都是那么的不堪一击。那时翻看了软件的帮助，里面列了好多它的人工智能所采用的技术的英文术语，虽然不懂，但觉得作者好厉害，觉得人工智能好神奇。我萌生了“做一个象棋程序”的想法。那时候，我已经接触计算机编程多年，会用图龟画一些简单图形，会用VB拖控件，会一点Pascal，会一点C，看起来会不少东西，但都是皮毛，“做一个象棋程序”成为驱动我真正熟练掌握一门计算机语言的动力。而这个想法真正变成了现实的那一刻，真是太美妙了——尽管它只是一个能计算4层的、在今天看来很简单的小程序。&lt;/p&gt;
&lt;h3&gt;二．从象棋到五子棋&lt;/h3&gt;
&lt;p&gt;完成第一个象棋程序后，我又陆续学习了一些相对高级的技术，虽然现在回过头看，这些高级技术不仅依旧是皮毛，而且那时我对它们中的部分还有一些错误的理解和认识，可是即便如此，我借助这些技术重写的象棋程序，还是达到了令我满意的效果——它战胜了我和我的父亲。&lt;/p&gt;
&lt;p&gt;就在我的人机博弈故事似乎要划上句号的时候，一位我很敬重的，平日交流（主要是请教）算法问题的网友跟我提到，能写好象棋，不一定能写好五子棋，后者比前者困难。我不相信，于是决定试一试。值得一提的是，那时恰好有几个有趣因素的共同影响，让我很大程度上低估了五子棋的人机对弈的难度：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;带人工智能的五子棋程序及代码比中国象棋多不少。许多编程刚入门的新手，都可以写出一个五子棋程序，而中国象棋是相对少见的。&lt;/li&gt;
&lt;li&gt;参加NOIP（全国信息学奥林匹克联赛）的时候，有个外校的同学和我下了一局五子棋，套八卦赢了我，之后告诉我五子棋有必胜策略，让我误解为利用套用简单的八卦就可以必胜。&lt;/li&gt;
&lt;li&gt;我曾读过一位网友写的五子棋人工智能的文章及代码，核心代码只有几百行，尽管软件实际做不到必胜，可作者表示只是有漏洞而已，这让我误认为对这几百行做一点修补，就可以实现必胜。&lt;/li&gt;
&lt;li&gt;恰好一个宣称无禁手执黑必胜的软件“五子棋终结者1.0”刚刚发布，网上有不少的差评的声音。一方面有不少人找出了若干bug，导致软件无法做到必胜；另一方面许多的评论说做到传统的无禁手规则必胜是很容易的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好了，回到主线，其实结果已经不难猜到了——我第一次尝试写的五子棋程序，走棋破绽百出。后来我逐渐了解到，那个时候，最强的有禁五子棋软件（黑石），棋力依旧远不及人类的最高水平；作为对比，06年的时候，中国象棋程序已经达到了人类的最高水平（浪潮天梭战平许银川）。现在我可以来解释一下，为什么五子棋人机对弈看起来比象棋简单，而实际比象棋困难了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;五子棋的着法生成比象棋简单很多，同时，可以通过简单的判定棋形（活三，眠四等），来实现一个简单的静态评估函数，有了着法生成、局面评估这两部分就能实现一个能走棋的五子棋程序了，所以看起来五子棋的人机对弈程序门槛是不高的。&lt;/li&gt;
&lt;li&gt;传统的无禁手规则和有禁手规则下，由于黑棋先手的巨大优势，五子棋被计算机穷举证明了先手必胜。然而，现代专业五子棋都采用一系列基于交换的开局规则，如国际赛事里无禁手的swap-2规则，有禁手的RIF规则、山口规则，使得先手必胜不复存在。所以五子棋在专业规则下并没有被终结。&lt;/li&gt;
&lt;li&gt;五子棋在专业规则下不仅仅没有被终结，而且自身的复杂度是高于中国象棋的。即使只考虑15x15的棋盘，五子棋的状态空间复杂度约为10的105次方，而中国象棋只有10的48次方。（可能较真的读者会提出博弈树复杂度的对比，然而考虑到本文的定位，这里不深入分析博弈树复杂度。但请这部分读者注意在对比博弈树复杂度前，请明确博弈树复杂度的定义，并弄清楚你所参考的数据源中，对五子棋部分的计算采用的是什么开局规则）&lt;/li&gt;
&lt;li&gt;五子棋的分支因子比中国象棋高得多，这使得对程序而言，五子棋很难计算得很深。&lt;/li&gt;
&lt;li&gt;五子棋的审局相比中国象棋要困难，五子棋中的棋形作为基本材料，是类似象棋的，然而五子棋里最为重要的空间及大局观是较为抽象的概念。在我看来，五子棋的审局形似象棋，而神似围棋。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重新回到主线，对于五子棋人机对弈，其实除了五子棋对弈问题本身的难度外，还有一个难点是资料的缺乏。一次失败就放弃不是我的风格，经历过冥思苦想数月无进展的郁闷，经历过由偶然灵感获得巨大飞跃的狂喜，经历过读罢论文后的恍然大悟，也经历过与朋友交流过程中的豁然开朗，经历就这样一笔带过吧，结果是，从2012年Gomocup前的某次偶然的尝试中获得的巨大提升过后，五子棋人工智能程序&lt;a href="http://www.aiexp.info/pages/yixin.html"&gt;弈心&lt;/a&gt;成为了最好的五子棋人工智能程序之一。&lt;/p&gt;
&lt;h3&gt;三．偶遇良师&lt;/h3&gt;
&lt;p&gt;如果问我为什么要做研究工作，我会回答因为它有趣，然而如果你追问为什么它有趣，这问题就不是那么容易回答了。我觉得我把前面几段文字拍出来，或许可以作为一个答案，因为我觉得那些有类似经历的人或许会产生共鸣。这种研究工作的有趣之处，就同牛顿说的那样：“像是一个在海边玩耍的小孩，不时发现比寻常更为光滑的一块卵石或比寻常更为美丽的一片贝壳”，当你发现了你过去没有发现的东西、前人未发现的东西，当你成为世界上第一个做成某个未知事物的人的时候，这真的是一件很有意思的事情，不是吗？研究工作是真实世界里的游戏。研究工作，多数时候，过程中会遇到各种波折，游戏的世界里，同样会遇到各种困难，但让你觉得玩游戏“爽”的原因，是你可以通过努力，战胜这些困难，获得一些成就，从而获得一些成就感，研究工作是一样的道理。&lt;/p&gt;
&lt;p&gt;而我对研究工作的兴趣，一定程度上契合了ACM班的“培养计划”——培养计算机科学家。班级在大二的下学期末会要求学生选择一个导师，进入实验室做科研工作。而在选导师前，每位导师有5分钟的时间来做自我介绍，以及实验室介绍，这个介绍会选在某一天集中进行。大约有20位导师，他们做完介绍后，我们随即进行导师志愿的填写。由于这种要求当场填写志愿的原因，其实在导师做自我介绍前，我们都提前（几天，几周，甚至几月）了解过大致有哪些导师可选，导师的方向课题等等，而我也有了自己的理想人选。可是人生是充满戏剧性的，在我的候选名单中的那位老师，因要离开我们学校（到南京大学了），所以不再招学生。而直到要填写志愿前的最后5分钟，我才知道这件事情。由于我的候选名单里只有这一位老师，这一突发事件让我有点不知所措。在我在仅有的几分钟里尽力回忆过去的100分钟里的宣讲后，我决定就选择俞凯老师了。尽管此前我对俞凯老师的信息一无所知，但我相信我的选择是明智的，原因可能比较出人意料：除了他做的语音工作我觉得很有趣这点外，主要的一点是他是唯一在宣讲的5分钟里给学生提出要求和期望的老师。嗯，就是他了。&lt;/p&gt;
&lt;p&gt;“良师益友”四个字用于评价俞凯老师是十分贴切的，他是一位可以和学生并肩奋战到凌晨的老师，他是一位可以真诚且无私地为你付出的时间和心血的朋友。俞凯老师不仅在学术上给予贴心的指导，更在无时无刻地在生活中的一言一行里潜移默化地指导着学生做人与做事。每学期的Kick Off Meeting，俞凯老师都会用王蒙的《青春万岁》序诗来勉励我们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;所有的日子，所有的日子都来吧，
让我编织你们，用青春的金线，
和幸福的璎珞，编织你们。

有那小船上的歌笑，月下校园的欢舞，
细雨蒙蒙里踏青，初雪的早晨行军，
还有热烈的争论，跃动的、温暖的心……

是转眼过去了的日子，也是充满遐想的日子，
纷纷的心愿迷离，像春天的雨，
我们有时间，有力量，有燃烧的信念，
我们渴望生活，渴望在天上飞。

是单纯的日子，也是多变的日子，
浩大的世界，样样叫我们好奇，
从来都兴高采烈，从来不淡漠，
眼泪，欢笑，深思，全是第一次。

所有的日子都去吧，都去吧，
在生活中我快乐地向前，
多沉重的担子，我不会发软，
多严峻的战斗，我不会丢脸；
有一天，擦完了枪，擦完了机器，擦完了汗，
我想念你们，招呼你们，
并且怀着骄傲，注视你们！
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每次他朗读这首诗，他都会动情。他常常向学生分享他的故事，他的激情，他的态度，他的勤奋，感染着我，给予我源源不断的正能量。&lt;/p&gt;
&lt;h3&gt;四．深度学习与对话管理&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/dialogue_system.png" /&gt;&lt;/p&gt;
&lt;p&gt;深度学习（Deep Learning）是近年来很火的一个话题，受到了学术界和工业界的极大重视。这一话题下的深度神经网络（Deep Neural Networks）在语音识别中应用取得了30年来最大的性能提高。然而，在语音交互的若干核心领域，如对话管理、语音理解等方面还没有广泛使用深度神经网络。我跟随俞凯老师做的研究工作，题为“基于深度神经网络的语音交互技术研究”，实际开展中主要着眼于对话管理（Dialogue Management）中的对话状态跟踪（Dialogue State Tracking）。&lt;/p&gt;</summary><category term="我"></category></entry><entry><title>Towards Deep Yixin</title><link href="/towards-deep-yixin.html" rel="alternate"></link><updated>2014-09-07T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2014-09-07:towards-deep-yixin.html</id><summary type="html">&lt;p&gt;Recently, I have been struggling with varieties of multi-threading bugs, trying to enable Yixin to take advantage of multi-core processors. Although there is still some space to improve the speedup, the result is good to some extent, because what I would like now is just making Deep Yixin run without bugs from synchronization. There is no doubt that the multi-threaded search will be improved in the future.&lt;/p&gt;
&lt;p&gt;I tested the Deep Yixin (0.4.28) on a 4-core i7 with 21 balanced openings, and the result is as follows:&lt;/p&gt;
&lt;p&gt;300s/1000s&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Deep Yixin loses&lt;/th&gt;
&lt;th&gt;Deep Yixin wins&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Yixin14(0.4.3)&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tito14&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Renjusolver(H6)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hewer14&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;(2015-11-26 Update)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The framework for SMP has been redesigned.  Rather than Windows API used in previous versions, the new framework is fully implemented with the thread library introduced by C++11.  Besides, I managed to make extra thread information maintenance cost little so that the speed of single-threaded search in the new framework is almost the same as the single-threaded version.&lt;/p&gt;
&lt;p&gt;The preliminary result between 2 threads vs 1 thread is 25:11 (18 balanced openings carefully selected by a gomoku expert were used).  Both turbo boost and hyper-threading were turned on.  Time settings were 300s/1000s.  It is worth noting that the strength difference could be inflated quite a bit because of the test being self test.&lt;/p&gt;</summary><category term="yixin"></category><category term="multi-thread"></category></entry><entry><title>康奈尔印象</title><link href="/%E5%BA%B7%E5%A5%88%E5%B0%94%E5%8D%B0%E8%B1%A1.html" rel="alternate"></link><updated>2014-08-04T00:00:00+02:00</updated><author><name>孙锴</name></author><id>tag:,2014-08-04:康奈尔印象.html</id><summary type="html">&lt;h2&gt;Ithaca is Gorges&lt;/h2&gt;
&lt;p&gt;伊萨卡（Ithaca）是位于美国纽约州的城市，是康奈尔大学的所在地。到康奈尔后，John和Judy向我们每人发了一份介绍Ithaca的材料，材料袋上写的“Ithaca is Gorges”——这一表述并不夸张，伊萨卡有好多的峡谷和瀑布。康奈尔大学就建在壮观的峡谷与瀑布之间。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/cornell1.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;这里人与自然相处和谐，水清、树荣、天蓝、草盛，时常可以看到松鼠等小动物。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/cornell2.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Programming Language and Logic&lt;/h2&gt;
&lt;p&gt;或许是因为Programming Language是康奈尔大学的计算机系的实力较强的研究领域，“编程语言和逻辑”成为我们康奈尔之行所上的两门课之一。David Gries主讲循环不变式(Loop Invariant)，Michael Clarkson主讲编程语言Coq，对于我来说这两部分课程内容都比较新颖。两位教授对教学工作的投入给我留下了深刻印象，尤其是David Gries教授对作业评注的细致程度出乎我的意料。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/cornell3.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Specialty Practice&lt;/h2&gt;
&lt;p&gt;“专业实习”是我们在康奈尔的另一门课。我们每人从John给出的约10个主题中选出一个感兴趣的，提出相关问题，并进行为期一个月的研究。每个人要对所探究的问题做一次演讲，最后提交一份不超过三页的报告。因为在康奈尔的这段时间恰好包含SLT'14的截稿时间（7月下旬），且准备提交的论文还有一些工作没有完成，包括一部分理论推导和一部分实验，所以我将这部分未完成的工作作为这门课的研究内容。&lt;/p&gt;
&lt;h2&gt;Lectures&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/cornell4.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;除了两门课外，在工作日的其它时间我们参加了很多教授的讲座。讲座内容涉及计算机系统，计算机理论，图像，计算机语言等，以系统和理论居多。在诸多讲座中，我最感兴趣的机器学习方面的讲座只有一场，演讲者是Thorsten教授，他演讲的主题是Learning with Humans in the Loop，也是他在ECML上的Keynote Talk。&lt;/p&gt;
&lt;h2&gt;Communications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hadas Kress-Gazit 的机器人实验室&lt;/strong&gt; 在去康奈尔之前，导师提到了Hadas Kress-Gazit教授所做的工作可能与state tracking相关。经过邮件联系，我与陈楠昕参观了她的实验室，观赏了他们过去的主要工作的展示，并了解了他们正在进行的研究工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与Thorsten Joachims交流&lt;/strong&gt; Thorsten Joachims是康奈尔大学为数不多的机器学习方向的教授。我与他进行了约40分钟的交流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与Yun Jiang交流&lt;/strong&gt; 在一次ice cream party，和一位土耳其的学生交流中我了解到Ashutosh Saxena教授的机器人组在做一些我看来很有趣的工作，同时又了解到到Ashutosh Saxena是康奈尔大学为数不多的另一位机器学习方向的教授，所以我联系了Ashutosh Saxena以及他们组的一些PhD学生，并最终在另一次ice cream party上与Yun Jiang进行了较长时间的交流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与其它教授、PhD学生交流&lt;/strong&gt; 尽管康奈尔大部分实验室与我做的研究工作交集都不大，我仍然与部分教授进行了一定的交流，尤其是涉及到我感兴趣的一些话题（电子货币）的教授。另外我与多位不同方向的PhD学生进行了交谈。 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="康奈尔"></category></entry><entry><title>Implementing Elegant Quines in C with Preprocessing</title><link href="/implementing-elegant-quines-in-c-with-preprocessing.html" rel="alternate"></link><updated>2014-08-01T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2014-08-01:implementing-elegant-quines-in-c-with-preprocessing.html</id><summary type="html">&lt;h2&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;The name "quine" was coined by Douglas Hofstadter, in his popular science book Gödel, Escher, Bach: An Eternal Golden Braid, in the honor of philosopher Willard Van Orman Quine (1908–2000), who made an extensive study of indirect self-reference, and in particular for the following paradox-producing expression, known as Quine's paradox:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;"Yields falsehood when preceded by its quotation" yields falsehood when preceded by its quotation.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Concretely, the term "quine" is referred to a computer program which takes no input and produces a copy of its own source code as its only output. First appeared in Paul Bratley and Jean Millo's article "Computer Recreations: Self-Reproducing Automata" in 1972, the idea of quine is fascinating due to its self-reproducing feature. For amusement, programmers sometimes attempt to develop the shortest possible quine in any given programming language. Moreover, problems based on the idea of quine are popular in various code golf, which is a type of recreational computer programming competition in which participants strive to achieve the shortest possible code that implements a certain algorithm.&lt;/p&gt;
&lt;p&gt;There are many theoretical results for quine. For example, it is possible to implement quine in any Turing complete programming language, as a direct consequence of Kleene's recursion theorem. However, this article focuses more on quines' implementation.&lt;/p&gt;
&lt;p&gt;In some languages, quines are quite easy to be implemented, since in some languages, an empty program is a quine. Such an empty program, submitted as "the world's smallest self reproducing program", once won the "worst abuse of the rules" prize in the International Obfuscated C Code Contest. Another possible way to achieve self-reproducing is to use file operations to read its source code and print, which seems a bit cheating. All these kinds of trival cases are omitted in this article.&lt;/p&gt;
&lt;p&gt;This article shows an easy, general, and elegant way to implement quines in C with preprocessing which not only have short length, but can easily do general purpose computations as well. The techniques in this article are widely used in various code golf.&lt;/p&gt;
&lt;p&gt;The remainder of the article is organized as follows. In section 2, the preprocessing techniques used in this article are described. Section 3 shows how to implement quines.&lt;/p&gt;
&lt;h2&gt;2. The C Preprocessing&lt;/h2&gt;
&lt;p&gt;One of the major use of the preprocessor in C is to define macros, which is also used to implement quines in this article. A macro definition is usually of the following form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define MACRO_NAME(arg1, arg2, ...) [code to expand to]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For instance, a simple macro for multiplication might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define MULT(x, y) (x)*(y)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After &lt;code&gt;MULT&lt;/code&gt; is defined, one can write &lt;code&gt;MULT(4, 2+3)&lt;/code&gt; and the preprocessor expands it to &lt;code&gt;(4)*(2+3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Besides macro itself, the stringize or number-sign operator &lt;code&gt;#&lt;/code&gt; is also used in this article, which can convert a macro parameter into a string constant. For instance, with the following macro  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define hello(a) printf(&amp;quot;Hello &amp;quot; #a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One can write &lt;code&gt;hello(Kai)&lt;/code&gt; and the preprocessor expands it to &lt;code&gt;printf("Hello " "Kai")&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Now, it is high time for us to define the &lt;em&gt;magic operator&lt;/em&gt; using macro and stringize operator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is easy to see how does the &lt;em&gt;magic operator&lt;/em&gt; work with an example, which will be given in the next section.&lt;/p&gt;
&lt;h2&gt;3. Quine Implementation&lt;/h2&gt;
&lt;p&gt;With the &lt;em&gt;magic operator&lt;/em&gt;, A simple quine can be implemented as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;
&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, let us analyse the above quine. After expanding the macro, the code becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main(){printf(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;,s);}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can be seen that the variable &lt;code&gt;s&lt;/code&gt; is a pointer pointing to the string of the code which is written as the parameter of macro &lt;code&gt;Q()&lt;/code&gt;, that is, &lt;code&gt;main(){printf("#define Q(x)char*s=#x;x\nQ(%s)",s);}&lt;/code&gt;, which is also the code after the definition of &lt;code&gt;s&lt;/code&gt; for actual execution. Therefore, with &lt;code&gt;s&lt;/code&gt;, in order to achieve self reproduceing, only &lt;code&gt;#define Q(x)char*s=#x;x&lt;/code&gt; and &lt;code&gt;Q()&lt;/code&gt; should be rewritten in &lt;code&gt;printf()&lt;/code&gt; for output; the string of the other code can just be represented by &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In fact, the approach described above is a general way for quine implementation, which can be seen by considering the following framework:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define Q(x)char*s=#x;x&lt;/span&gt;
&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#define Q(x)char*s=#x;x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Q(%s)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the framework, &lt;code&gt;{A}&lt;/code&gt;, &lt;code&gt;{B}&lt;/code&gt;, &lt;code&gt;{C}&lt;/code&gt;, and &lt;code&gt;{D}&lt;/code&gt; can be replaced by any legal code in C, and the feature of self reproducing still holds (In particular, if there exist other variables with identifier &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; should be replaced by some unused identifier).&lt;/p&gt;
&lt;p&gt;With the approach with only a few modifications, we can go even further: implementing more general quines. For example, implement a general quine that outputs all its characters in the odd position when the user inputs "o" and outputs all its characters in the even position when the user inputs "e"; implement a general quine A that can output a general quine B, which can again output the general quine A, forming a "quine loop". As it is not difficult to implement both of them, here the solutions are not given, and these two problems are left for readers who are interested in the topic.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Quine_(computing)"&gt;http://en.wikipedia.org/wiki/Quine_(computing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Code_golf"&gt;http://en.wikipedia.org/wiki/Code_golf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cprogramming.com/tutorial/cpreprocessor.html"&gt;http://www.cprogramming.com/tutorial/cpreprocessor.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com/cprogramming/c_preprocessors.htm"&gt;http://www.tutorialspoint.com/cprogramming/c_preprocessors.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Quine"></category><category term="C/C++"></category><category term="Preprocessing"></category></entry><entry><title>Calculating All Feasible Solutions of Integer Linear Programming with PuLP and SCIP</title><link href="/calculating-all-feasible-solutions-of-ilp.html" rel="alternate"></link><updated>2014-07-29T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2014-07-29:calculating-all-feasible-solutions-of-ilp.html</id><summary type="html">&lt;h2&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Integer linear programming (ILP) is a method to achieve the best outcome in a mathematical model whose requirements are represented by linear relationships and unknown variables are required to be integers. Integer linear programming can be applied to various fields of study and has proved useful in diverse types of problems. In contrast to linear programming, which can be solved efficiently in the worst case, integer linear programming problems are in many practical situations NP-hard. Therefore, solving integer linear programming is not easy. Moreover, despite the fact that there are many professional solvers which can solve integer linear programming efficiently in most cases, most of them can only give one optimal solution even if many solutions exist. However, more than one solution, or even all solutions are needed in some applications.&lt;/p&gt;
&lt;p&gt;In this article, PuLP and SCIP (Solving Constraint Integer Programs) are combined together to solve that general problem, that is, given an integer linear programming problem, calculate all feasible solutions efficiently if the number of feasible solutions is not infinite. Specifically, first, PuLP is used to generate the integer programming model file; then the model file is passed to SCIP and all feasible solutions of the model are calculated with SCIP.&lt;/p&gt;
&lt;p&gt;PuLP is an LP modeler written in python. PuLP can generate MPS or LP files and call GLPK, COIN CLP/CBC, CPLEX, and GUROBI to solve linear problems. SCIP is currently one of the fastest non-commercial solvers for mixed integer programming (MIP) and mixed integer nonlinear programming (MINLP). It is also a framework for constraint integer programming (CIP) and branch-cut-and-price. It allows for total control of the solution process and the access of detailed information down to the guts of the solver.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/scip_fig1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The remainder of the article is organized as follows. In section 2, a sample problem is described which is used to illustrate the steps in the other sections. Section 3 shows how to generate the model file. Section 4 shows how to calculating all feasible solutions of a given model file.&lt;/p&gt;
&lt;h2&gt;2. Sample Problem&lt;/h2&gt;
&lt;h4&gt;Problem description:&lt;/h4&gt;
&lt;p&gt;Kai Sun would like to buy 100 chickens with 100 LTC. A rooster, a hen and a chick costs 3 LTC, 2LTC and 0.5LTC respectively. How many roosters, hens and chicks should Kai buy? If there are many solutions, output all of them. &lt;/p&gt;
&lt;p&gt;Convert the problem to ILP: &lt;/p&gt;
&lt;h4&gt;Variables:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Integer x, y, z, d
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Constraints:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;x+y+z = 100 
3x+2y+0.5z = 100 
0 &amp;lt;= x, y, z, d
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Objective function:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Minimize d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we use a dummy variable &lt;code&gt;d&lt;/code&gt; because for this problem, there are no objective function need to be optimized.&lt;/p&gt;
&lt;h2&gt;3. Model File Generation&lt;/h2&gt;
&lt;p&gt;With PuLP, it is easy to express the ILP and generate ".lp" file, which can be further read by SCIP. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pulp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpProblem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;chicken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpMinimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# 0 is the lower bound;&lt;/span&gt;
                                  &lt;span class="c"&gt;# &amp;quot;None&amp;quot; means no upper bound;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;y&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LpVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LpInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;constraint 1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;constraint 2&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;prob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeLP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;problem.lp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example, model file "problem.lp" is generated, and the contents of "problem.lp" are shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\* chicken *\
Minimize
OBJ: __dummy
Subject To
constraint_1: x + y + z = 100
constraint_2: 3 x + 2 y + 0.5 z = 100
Bounds
__dummy = 0
0 &amp;lt;= x
0 &amp;lt;= y
0 &amp;lt;= z
Generals
x
y
z
End
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. Calculating All Feasible Solutions&lt;/h2&gt;
&lt;p&gt;With SCIP, all feasible solutions of "problem.lp" can be calculated easily in the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Read model file using &lt;code&gt;read&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SCIP&amp;gt; read problem.lp
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the parameters which are required for collecting all feasible solutions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SCIP&amp;gt; set emphasis counter
SCIP&amp;gt; set constraints countsols collect TRUE
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculating all feasible solutions using &lt;code&gt;count&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SCIP&amp;gt; count
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write all feasible solutions to a file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SCIP&amp;gt; write allsolutions chicken_sol.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, file "chicken_sol" contains all feasible solutions of the sample problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#, z, y, x, objval
1(1), 80, 0, 20, 0
2(2), 68, 30, 2, 0
3(3), 70, 25, 5, 0
4(4), 72, 20, 8, 0
5(5), 74, 15, 11, 0
6(6), 76, 10, 14, 0
7(7), 78, 5, 17, 0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Tobias Achterberg. SCIP: Solving constraint integer programs. Mathematical Programming Computation, 1(1):1-41, 2009. &lt;a href="http://mpc.zib.de/index.php/MPC/article/view/4"&gt;http://mpc.zib.de/index.php/MPC/article/view/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/PuLP"&gt;https://pypi.python.org/pypi/PuLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Linear_programming"&gt;http://en.wikipedia.org/wiki/Linear_programming&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gnu.org/software/glpk/glpk.html"&gt;http://www.gnu.org/software/glpk/glpk.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.coin-or.org/"&gt;http://www.coin-or.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cplex.com/"&gt;http://www.cplex.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gurobi.com/"&gt;http://www.gurobi.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="SCIP"></category><category term="PuLP"></category><category term="ILP"></category><category term="LP"></category></entry><entry><title>Gomoku/Renju Resouces -- An Overview</title><link href="/gomoku-renju-resources-an-overview.html" rel="alternate"></link><updated>2014-07-07T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2014-07-07:gomoku-renju-resources-an-overview.html</id><summary type="html">&lt;p&gt;(Last update: 2015-12-4)&lt;/p&gt;
&lt;p&gt;I often recieve emails that ask for gomoku/renju resources, especially for AI design, so I write this article to summerize good resources I know. This page will be maintained and updated in the future. If you find any mistake in this page such as broken links, please contact me.&lt;/p&gt;
&lt;h2&gt;Reading Materials for AI Design&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://fragrieu.free.fr/SearchingForSolutions.pdf"&gt;&lt;strong&gt;Searching for Solutions in Games and Artificial Intelligence&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://chessprogramming.wikispaces.com/"&gt;&lt;strong&gt;Chess Programming Wiki&lt;/strong&gt;&lt;/a&gt; is a website which provides good reference for every aspect of chess programming. Although it mainly talks about chess, some basic techniques and ideas of chess AI design are similiar to those of gomoku/renju.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sze.hu/~gtakacs/download/wagnervirag_2001.pdf"&gt;&lt;strong&gt;Solving Renju&lt;/strong&gt;&lt;/a&gt; by Janos Wagner, Istvan Virag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gomocup.org/old/download.php?filename=GO-MOKU-AND-THREAT.ZIP"&gt;&lt;strong&gt;Go-Moku and Threat-Space Search&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis, Hendrik Jacob Herik, and M.P.H. Huntjens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://vanilla47.com/PDFs/Gomoku%20Renju%20Pente/Go-Moku-Solved-by-New-Search-Techniques.pdf"&gt;&lt;strong&gt;Go-Moku Solved by New Search Techniques&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis, Hendrik Jacob Herik, and M.P.H. Huntjens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sciencedirect.com/science/article/pii/0004370294900043"&gt;&lt;strong&gt;Proof-number Search&lt;/strong&gt;&lt;/a&gt; by Louis Victor Allis, Maarten van der Meulen, and H. Jaap Van Den Herik.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="http://www.xqbase.com/computer.htm"&gt;&lt;strong&gt;XQ Base&lt;/strong&gt;&lt;/a&gt; is a website which provides basic articles on chess programming. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="/files/introduction_to_xl.pdf"&gt;&lt;strong&gt;Introduction to XL&lt;/strong&gt;&lt;/a&gt; by Chengtao Chen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="/pn-search-and-db-search.html"&gt;&lt;strong&gt;Summary of Pn-search and Db-search&lt;/strong&gt;&lt;/a&gt; by Kai Sun.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Competitive Open-source AIs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://sourceforge.net/projects/piskvork/"&gt;&lt;strong&gt;Pela&lt;/strong&gt; (with piskvork)&lt;/a&gt; by Petr Lastovicka, Czech Republic. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Carbon Gomoku (with its documents in Polish)&lt;/strong&gt; (&lt;a href="http://mczard.republika.pl/gomoku.en.html"&gt;Original version&lt;/a&gt;, or &lt;a href="https://github.com/gomoku/Carbon-Gomoku"&gt;Modified version&lt;/a&gt; which supports Gomocup protocol) by Michał Czardybon, Poland. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Niren (XL)&lt;/strong&gt; (&lt;a href="/files/niren_source.zip"&gt;Original version&lt;/a&gt;, or &lt;a href="https://github.com/accreator/xl-engine"&gt;Modified version&lt;/a&gt; which supports Gomocup protocol) by Chengtao Chen, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stahlfaust (with its documents)&lt;/strong&gt; (&lt;a href="http://www.nowozin.net/sebastian/tu-berlin-2006/stahlfaust/"&gt;Original version&lt;/a&gt;, or &lt;a href="https://github.com/gomoku/Stahlfaust---Gomoku-AI-player"&gt;Modified version&lt;/a&gt; which supports Gomocup protocol) by Marco Kunze and Sebastian Nowozin, Germany.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/files/gm2_source.zip"&gt;&lt;strong&gt;GM2&lt;/strong&gt; (with part of its documents in Chinese)&lt;/a&gt; by Feng Liu, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://aean.net/kalscope/"&gt;&lt;strong&gt;KalScope&lt;/strong&gt;&lt;/a&gt; by Aean, China.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.softos.org/?p=156"&gt;&lt;strong&gt;Qingyue Renju&lt;/strong&gt;&lt;/a&gt; by Cong Zhang, China.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Open-source GUIs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://sourceforge.net/projects/piskvork/"&gt;&lt;strong&gt;Piskvork&lt;/strong&gt;&lt;/a&gt; by Petr Lastovicka, Czech Republic. It is a GUI that supports Gomocup protocol. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.renju.se/renlib/"&gt;&lt;strong&gt;Renlib&lt;/strong&gt;&lt;/a&gt; by Frank Arkbo, Sweden. Renlib is one of the best programs which can help you to build a library of renju openings, analysis and played games. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/accreator/Yixin-Board"&gt;&lt;strong&gt;Yixin Board&lt;/strong&gt;&lt;/a&gt; by Kai Sun, China. It is a specially designed GUI for Yixin, supporting Yixin protocol. (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Protocols for Computer Gomoku/Renju&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gomocup Protocol&lt;/strong&gt; (&lt;a href="http://petr.lastovicka.sweb.cz/protocl1en.htm"&gt;via files&lt;/a&gt; or &lt;a href="http://petr.lastovicka.sweb.cz/protocl2en.htm"&gt;via stdin/stdout&lt;/a&gt;) by Petr Lastovicka, Czech Republic. The protocol is used in &lt;a href="http://gomocup.org/"&gt;Gomocup&lt;/a&gt;, and tens of AIs support it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/accreator/Yixin-protocol"&gt;&lt;strong&gt;Yixin Protocol&lt;/strong&gt;&lt;/a&gt; by Kai Sun, China. The protocol is derived from Gomocup protocol. Compared with Gomocup protocol, Yixin protocol introduces more commands enabling &lt;a href="/pages/yixin.html"&gt;Yixin&lt;/a&gt; to have some new features such as renju rule support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="/files/botzone_protocol.zip"&gt;&lt;strong&gt;Botzone Protocol&lt;/strong&gt;&lt;/a&gt; by AI LAB, Peking University. &lt;a href="http://botzone.org/"&gt;Botzone&lt;/a&gt; is an online platform for AI competitions. Since it was updated in 2014 and lost all old data, the old protocol listed here is replaced by a new protocol, and the old one is no longer supported by Botzone's online platform. The old protocol can still be used in the offline AI testing program. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AI Competition and Online Platform&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gomocup.org/"&gt;&lt;strong&gt;Gomocup&lt;/strong&gt;&lt;/a&gt; (2000 - Present) (&lt;strong&gt;Recommend&lt;/strong&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://w-ai.org/"&gt;&lt;strong&gt;WAI&lt;/strong&gt;&lt;/a&gt; (2012 - 2014)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.grappa.univ-lille3.fr/icga/game.php?id=30"&gt;&lt;strong&gt;Computer Olympiad&lt;/strong&gt;&lt;/a&gt; (1989 - 1992)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Renju Computer World Championship&lt;/strong&gt; (&lt;a href="http://www.5stone.net/wc/worldcup_en.html"&gt;1991&lt;/a&gt;, &lt;a href="http://www.5stone.net/wc/worldcup_en.html"&gt;1998&lt;/a&gt;, &lt;a href="http://www.5stone.net/wc/worldcup_en.html"&gt;2000&lt;/a&gt;, 2004(&lt;a href="http://nosovsky.narod.ru/forth.html"&gt;link1&lt;/a&gt;,&lt;a href="http://renju.se/rif/news04.htm#36"&gt;link2&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hungarian Computer Go-Moku Open Tournament&lt;/strong&gt; (2005 (&lt;a href="http://gomokuworld.com/articles/hungarian_computer_gomoku_tournament_2005"&gt;1st&lt;/a&gt;, &lt;a href="http://www.sze.hu/~gtakacs/tournament/index.html"&gt;2nd&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://botzone.org/"&gt;&lt;strong&gt;Botzone&lt;/strong&gt;&lt;/a&gt; (2010 - Present)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AI vs. Human tournament&lt;/strong&gt; (&lt;a href="http://gomocup.org/results/"&gt;2006&lt;/a&gt;, 2011(&lt;a href="http://gomocup.org/results/"&gt;en&lt;/a&gt;,&lt;a href="http://www.piskvorky.cz/clanky/zajimavosti-ze-sveta-piskvorek-a-renju/ai-vs-clovek-2011-2/"&gt;cz&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Famous, Competitive, and Interesting AI List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Amoeba&lt;/strong&gt; by Galli Zoltan, Hungary. It uses Monte-Carlo tree search (MCTS) rather than commonly used algorithms such as alpha-beta search. It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Blackstone&lt;/strong&gt; by Victor Barykin, Russia. It is a commercial software for renju. It is the winner in tournament of the 2nd and the 3rd Renju Computer World Championship (1998, 2000), and the winner in solving problems of the 2nd Renju Computer World Championship (1998).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Carbon&lt;/strong&gt; by Michał Czardybon, Poland. It is the strongest open-source gomoku software. Its original version can be downloaded at &lt;a href="http://mczard.republika.pl/gomoku.en.html"&gt;Michał Czardybon's Homepage&lt;/a&gt;, and its modified version which supports Gomocup protocol can be obtained from &lt;a href="https://github.com/gomoku/Carbon-Gomoku"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fiver&lt;/strong&gt; by Meng Liu, China. A famous classic gomoku engine. It can be downloaded at &lt;a href="http://nosalex.narod.ru/f.zip"&gt;Nosovsky Japanese Games Home Page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Goro&lt;/strong&gt; by Victor Barykin, Russia. It is a commercial software for gomoku, the winner of the 6th, the 7th, the 10th, and the 11th Gomocup (2005, 2006, 2009, 2010). It took part in both the first and the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2006 and 2011. Goro was ranked the 4th in the 16th Gomocup (2015). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hector for Gomoku&lt;/strong&gt; by Csaba Jergler, Hungary. It is a general game playing search core module (Hector) along with a compile time connected game specific gomoku module. It took part in Gomocup from 2008 to 2010 and was ranked the 9th in the 11th Gomocup (2010). It has been excluded from Gomocup since 2011 because the old version of Hector stopped working and the author did not send the new version to Gomocup. It is not published, so there is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hewer&lt;/strong&gt; by Tomas Kubes, Czech Republic. Hewer was ranked the 7th in the 16th Gomocup (2015). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Hgarden&lt;/strong&gt; by Bingqing Han, China. It took part in the first AI vs. Human tournament, playing against one of the best Czech gomoku players in 2006. Hgarden was ranked the 6th in the 16th Gomocup (2015). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Meijin&lt;/strong&gt; by Oleg Stepanov, Russia. It played against human players in &lt;a href="http://www.renju.net/media/news/news00a.htm"&gt;Moscow Open Tournament&lt;/a&gt;, 2000, making it become the first program playing with human players in public competitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pacifist&lt;/strong&gt; by Shuai Han, China. Winner of gomoku AI competition on &lt;a href="http://botzone.org/"&gt;Botzone&lt;/a&gt; hosted by AI LAB, Peking University in Decemeber 2010. It is not published, so there is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pela&lt;/strong&gt; by Petr Lastovicka, Czech Republic. It is one of the most famous strong open-source gomoku engine. It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pisq&lt;/strong&gt; by Martin Petricek, Czech Republic. It is the winner of the 1st and the 2nd Gomocup (2000, 2001). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Onix&lt;/strong&gt; by Janos Wagner and Istvan Virag, Hungary. It is the winner of &lt;a href="http://gomokuworld.com/articles/hungarian_computer_gomoku_tournament_2005"&gt;the 1st Hungarian Computer Go-Moku Open Tournament&lt;/a&gt;, 2005. It took part in Gomocup from 2007 to 2011 and was ranked the 5th in the 12th Gomocup (2011). It has been excluded from Gomocup since 2012 due to its instability -- It was reported crashing randomly very often in the 13th Gomocup. Onix can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Renjusolver&lt;/strong&gt; by Xiangdong Wen. It is a commercial software for both gomoku and renju. It is the winner in solving problems of the 4th Renju Computer World Championship, 2004. It took part in the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2011. Renjusolver was ranked the 2nd in the 16th Gomocup (2015). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.5stone.net/"&gt;&lt;strong&gt;Super&lt;/strong&gt;&lt;/a&gt; by Tongxiang Zhang, China. It is the winner in solving problems of the 3rd Renju Computer World Championship (2000).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Swine&lt;/strong&gt; by Jirka Fontan, Czech Republic. It is the winner of the 4th and the 5th Gomocup (2003, 2004). It took part in the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2011. Swine was ranked the 5th in the 16th Gomocup (2015). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tito&lt;/strong&gt; by Andrej Tokarjev, Hungary. It is the winner of the 8th, the 9th, and 12th Gomocup (2007, 2008, 2011). It took part in both the first and the second AI vs. Human tournament, playing against one of the best Czech gomoku players in 2006 and 2011. Tito was ranked the 3rd in the 16th Gomocup (2015). It can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trunkat&lt;/strong&gt; by Jiri Trunkat. It is the winner of the 3rd Gomocup (2002). Trunkat can be downloaded at &lt;a href="http://gomocup.org/download/"&gt;Gomocup.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sze.hu/~gtakacs/tyson.html"&gt;&lt;strong&gt;Tyson&lt;/strong&gt;&lt;/a&gt; by Gabor Takacs, Hungary. It is winner of &lt;a href="http://www.sze.hu/~gtakacs/tournament/index.html"&gt;the 2nd Hungarian Computer Go-Moku Open Tournament&lt;/a&gt;, 2005. It is not published, so there is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vertex&lt;/strong&gt; by Artyom Shaposhnikov and Alexander Nosovsky, Russia. It is the winner of the 1st Renju Computer World Championship, 1991. There is no download available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Victoria&lt;/strong&gt; by V. Allis and L Schoenmaker, Netherlands. It is the first program which is bound to win if it moves first for both freestyle and standard gomoku without modern opening rules. It is the winner of gomoku in the 4th Computer Olympiad. Victoria is not published, so there is no download available. Refer to &lt;a href="http://fragrieu.free.fr/SearchingForSolutions.pdf"&gt;Allis's thesis&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/pages/yixin.html"&gt;&lt;strong&gt;Yixin&lt;/strong&gt;&lt;/a&gt; by Kai Sun, China. It is a free software for both gomoku and renju. It is the winner of the 13th, 14th, 15th, and 16th Gomocup (2012, 2013, 2014, 2015).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Useful Software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RenArtist&lt;/strong&gt; by Yusuke Okuno, Japan. It gives a good solution about making databases and publish them directly on the web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://bf92.com/soft/five/five.htm"&gt;&lt;strong&gt;Gomoku Terminator&lt;/strong&gt;&lt;/a&gt; by Shanshan Liu, China. It is a free software which is bound to win if it moves first for freestyle gomoku without modern opening rules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rules and Variations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prepared Balanced Opening&lt;/strong&gt; is the most popular opening rule in computer gomoku. It is used by both Hungarian Computer Go-Moku Open Tournament and Gomocup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Alt text" src="/images/openings_gomocup14.png" /&gt;&lt;/p&gt;
&lt;p&gt;(3 prepared balanced openings used in the 15th Gomocup (provided by Alexander Bogatirev, manager of Team Russia online, member of Gomoku Committee RIF, 2014))&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://renju.net/media/showrule.php?rule=11"&gt;&lt;strong&gt;Gomoku swap2&lt;/strong&gt;&lt;/a&gt; is an opening rule for gomoku. The rule is as follows: (1) The first player puts 2 black and 1 white stones anywhere on the board; (2) The second player has 3 options: a. stay with white; b. swap; c. put 2 more stones and let the opponent choose the colour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/RIF_opening_rule"&gt;&lt;strong&gt;RIF opening rule&lt;/strong&gt;&lt;/a&gt; is an opening rule for renju adopted by Renju International Federation in 1996.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Yamaguchi_opening_rule"&gt;&lt;strong&gt;Yamaguchi opening rule&lt;/strong&gt;&lt;/a&gt; is an opening rule for renju developed by Japanese player Yusui Yamaguchi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Swap after 1st move&lt;/strong&gt; is an opening rule for gomoku. The rule is as follows. (1) The first player puts 1 black stone anywhere on the board; (2) The second player has 2 options: a. stay with white; b. swap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Pente"&gt;&lt;strong&gt;Pente&lt;/strong&gt;&lt;/a&gt; is a strategy board game for two or more players similar to gomoku/renju.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Connect6"&gt;&lt;strong&gt;Connect 6&lt;/strong&gt;&lt;/a&gt; is a two-player strategy game similar to gomoku/renju.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Useful Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.renju.net/"&gt;&lt;strong&gt;The homepage of Renju International Federation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://gomokuworld.com/"&gt;&lt;strong&gt;Gomoku World&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.renjuoffline.com/"&gt;&lt;strong&gt;Renju Offline&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.playok.com/"&gt;&lt;strong&gt;PlayOK&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.littlegolem.net/"&gt;&lt;strong&gt;Little Golem&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Czech) &lt;a href="http://www.piskvorky.cz/"&gt;&lt;strong&gt;Piskvorky.cz&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Polish) &lt;a href="http://gomoku.pl/"&gt;&lt;strong&gt;Gomoku.pl&lt;/strong&gt;&lt;/a&gt; (&lt;a href="http://forum.gomoku.pl/"&gt;Forum&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Chinese) &lt;a href="http://www.iwzq.com/"&gt;&lt;strong&gt;Iwzq.com&lt;/strong&gt;&lt;/a&gt; (&lt;a href="http://www.iwzq.com/index.asp"&gt;Forum&lt;/a&gt;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(In Estonian) &lt;a href="http://renju.ee/"&gt;&lt;strong&gt;Renju.ee&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gomoku"></category><category term="renju"></category><category term="resource"></category></entry><entry><title>Moving my blog from GAE to Github Pages</title><link href="/moving-my-blog-to-github.html" rel="alternate"></link><updated>2014-07-01T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2014-07-01:moving-my-blog-to-github.html</id><summary type="html">&lt;p&gt;Due to the resource limitation of GAE for free users as well as maintainance of the blog system Micolog being stopped for a long time, I decide to move my blog from GAE to Github Pages.&lt;/p&gt;
&lt;p&gt;Since Github only accepts static site with HTML, images CSS, JS, etc., a static site generator is needed for me to make the work of site publishing easy. Fortunately, there are many tools to do this work such as Octopress and Pelican. I choose Pelican because I am more familiar with Python, though the whole process of generating the static site needs little knowledge about Python (I believe for users of Octopress, they also do not need to be familiar with Ruby :) ). As pelican supports writing posts in markdown, in the future, I will no longer struggle with formatted text.&lt;/p&gt;
&lt;p&gt;Things went well during the migration, except that there was a little problem about date format of the theme bootstrap. The problem was easily solved with the help of &lt;a href="https://github.com/getpelican/pelican/issues/816"&gt;https://github.com/getpelican/pelican/issues/816&lt;/a&gt;.&lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>Paper translation: "All about Eve: Execute-Verify Replication for Multi-Core Servers"</title><link href="/paper-translation-all-about-eve.html" rel="alternate"></link><updated>2013-12-10T00:00:00+01:00</updated><author><name>Kai Sun</name></author><id>tag:,2013-12-10:paper-translation-all-about-eve.html</id><summary type="html">&lt;p&gt;Translating a paper is one of the homework of our computer system class. I was given the paper "All about Eve: Execute-Verify Replication for Multi-Core Servers", which takes several days for me to translate. Now I make it public and wish it can help some people's study.&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/translation_all_about_eve.pdf"&gt;Download&lt;/a&gt;&lt;/p&gt;</summary><category term="translation"></category><category term="system"></category></entry><entry><title>论文翻译 关于Eve的一切：面向多核心服务器的执行-验证复制</title><link href="/%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91-%E5%85%B3%E4%BA%8EEve%E7%9A%84%E4%B8%80%E5%88%87.html" rel="alternate"></link><updated>2013-12-10T00:00:00+01:00</updated><author><name>孙锴</name></author><id>tag:,2013-12-10:论文翻译-关于Eve的一切.html</id><summary type="html">&lt;p&gt;翻译一篇论文是我们计算机系统课程的作业之一，题为All about Eve: Execute-Verify Replication for Multi-Core Servers的论文被分配给了我，它的翻译花费了若干天的时间。现在我将译文公开，希望它对一些人有用。&lt;/p&gt;
&lt;p&gt;&lt;a href="/files/translation_all_about_eve.pdf"&gt;下载&lt;/a&gt;&lt;/p&gt;</summary><category term="翻译"></category><category term="系统"></category></entry><entry><title>Improvement of Yixin</title><link href="/improvement-of-yixin.html" rel="alternate"></link><updated>2013-09-14T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2013-09-14:improvement-of-yixin.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I spent some time trying optimizing Yixin's search and evaluation. The result is good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I received two bug reports and both of them are about Yixin's rule and they all influence Yixin's strength. These bugs have been fixed now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;update(2013.9.29):&lt;/p&gt;
&lt;p&gt;The test result of Yixin 0.2.24&lt;/p&gt;
&lt;p&gt;300s/1000s&lt;/p&gt;
&lt;p&gt;37 balanced openings&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Yixin loses&lt;/th&gt;
&lt;th&gt;Yixin wins&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Tito10&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Swine11&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Renjusolver(H6)&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hewer12&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary><category term="yixin"></category></entry><entry><title>一篇中文日志</title><link href="/%E4%B8%80%E7%AF%87%E4%B8%AD%E6%96%87%E6%97%A5%E5%BF%97.html" rel="alternate"></link><updated>2013-03-25T00:00:00+01:00</updated><author><name>孙锴</name></author><id>tag:,2013-03-25:一篇中文日志.html</id><summary type="html">&lt;p&gt;最近两个月我断断续续地花了一些时间改进弈心，但总体看引擎提升不大。&lt;/p&gt;
&lt;p&gt;架构方面，虽然一年前弈心0.4的架构已经设计好，但是我一直没有抽出足够的时间去完成0.4，这也使得0.2架构要第三次参加Gomocup了。从设计角度看，0.2架构虽然比大多数引擎优秀，但是由于这个架构设计的固有缺陷，部分现阶段可用的搜索优化技术无法使用，但另一个角度看，0.2在两年期间大部分bug均被修正，整体技术还是比较成熟的。说到bug，这两个月中我又找到了0.2系列中的几个bug，但令人沮丧的是，对这些bug的修正并没有带来引擎棋力的提高，部分bug的去除反而导致了棋力下降。&lt;/p&gt;
&lt;p&gt;搜索方面，由于前面说的架构设计局限，搜索上不容易做大的改动，尝试了一些技术，效果均不明显，目前只保留了一个搜索上的改进。弈心搜索上的最大的两个弱项：中后盘深度和算杀能力并没有得到足够改善。&lt;/p&gt;
&lt;p&gt;审局方面，弈心一直以来在审局尤其是大局观方面做得不够优秀，以至于弈心不足以完全挑战人类，为了解决这个问题，在寒假期间我建立了一套控场模型描述五子棋的大局观。这套模型在边角局上表现出色，但是在中心局中表现地糟糕，这使得我提供给以中心局为主的Gomocup的引擎中的审局部分并不含有这套大局观模型（目前提供给Gomocup2013的版本是0.2.17，一个表现比较稳定但并不出众版本）。这期间与XR进行了一些交流，曾一度希望通过修改棋形的评分表提高棋力，然而最终也基本没有进展。审局还做了其它许多方面的修改尝试，但均不成功。&lt;/p&gt;
&lt;p&gt;总之，弈心的单项有提高，比如为边角局设计的弈心有较好的边角控场能力，但是弈心的整体提升并不显著。未来最需要把握好的是设计的整体思想，现在有很多设计上的想法，有些直观上会认为其非常优秀，但这种感觉上的“优秀”是源于其使用了相对复杂的东西：比如复杂数学公式、复杂的算法，但是真正的出色的设计，重要的是效果，而非事物有多复杂。“神奇化易是坦途，易化神奇不足奇”，常见一些的设计者，在基本知识的把握还欠火候的时候，就在讨论、设计、设想五子棋的位棋盘，他们是浮躁的，注定不会有什么结果的，然而，我不希望我成为这段文字所描绘的，在更高高度上俯视我的人，对我的评价。&lt;/p&gt;</summary><category term="弈心"></category></entry><entry><title>A simple "Rock Scissors Paper" AI</title><link href="/a-simple-rock-scissors-paper-ai.html" rel="alternate"></link><updated>2011-11-17T00:00:00+01:00</updated><author><name>Kai Sun</name></author><id>tag:,2011-11-17:a-simple-rock-scissors-paper-ai.html</id><summary type="html">&lt;p&gt;The idea comes from the following page:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.nytimes.com/interactive/science/rock-paper-scissors.html"&gt;http://www.nytimes.com/interactive/science/rock-paper-scissors.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just for fun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#define MAXSEQ 4&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;LOSE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;DRAW&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;WIN&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; %c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Rock     &amp;lt;-&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;S&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Scissors &amp;lt;-&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;P&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paper    &amp;lt;-&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="p"&gt;{&lt;/span&gt;
                                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                                        &lt;span class="p"&gt;{&lt;/span&gt;
                                                &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                        &lt;span class="p"&gt;}&lt;/span&gt;
                                        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                                        &lt;span class="p"&gt;{&lt;/span&gt;
                                                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                        &lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Paper   &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Rock    &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Scissors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;COMPUTER %s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;l=%d d=%d w=%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                        &lt;span class="n"&gt;rec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;que&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXSEQ&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="AI"></category><category term="rock scissors paper"></category><category term="game"></category></entry><entry><title>Bug &amp; Bug</title><link href="/bug-and-bug.html" rel="alternate"></link><updated>2011-03-30T00:00:00+02:00</updated><author><name>Kai Sun</name></author><id>tag:,2011-03-30:bug-and-bug.html</id><summary type="html">&lt;p&gt;Although my old AI supports standard game, I know there exists some bugs while using that rule.And at the same time I got the new gmotor, I tested gmotor2011 yesterday and found that it performed better than Yixin with standard rule, so I tried to fix these bugs. The work was boring but didn't take a long time. It seems OK, but when I decided to test a game between Yixin and gmotor with Piskvork, Yixin still didn't perform well. I checked Yixin again and again, but no bug was found. So I started to suspect the Piskvork. The latter tests proved I was right. Piskvork8.4 has a bug: When you choose to start a TOURNAMENT with standard-game rule, the Piskvork will not send message"info_exact5=1" to AI. You may ask me why gmotor still obey that rule. After testing it I conclude that gmotor only knows the standard rule, that means it doesn't consider more than 5 stones as win even if you set the freestyle rule.&lt;/p&gt;
&lt;p&gt;You can easily find the bug using this opening: 0,0, -5,-5, 0,1, 5,5, 0,-1, -5,-6, 0,3, 5,6, 0,4&lt;/p&gt;
&lt;p&gt;Or you can find the bug by writing such an AI function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;brain_turn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;pipeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MESSAGE %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info_exact5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isFree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pipeOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DEBUG %d coordinates didn&amp;#39;t hit an empty field&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;do_mymove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="bug"></category><category term="piskvork"></category><category term="gmotor"></category><category term="yixin"></category></entry></feed>